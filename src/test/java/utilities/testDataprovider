/**
 * @author      Sudhindra Immidi
 *  
 */

package com.pru.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map.Entry;
import java.util.*;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.commons.io.FileUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFHyperlink;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.RichTextString;

import jxl.*; 

public class TestDataProvider extends ConfigProperties {

	ConfigProperties cp = new ConfigProperties();
	// Usage : This Method is used to read information of the node specific data during test execution.
	public static LinkedHashMap<String, String> getGridData(String osbrowserverision) throws Exception {
		LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();
		try{
			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			boolean flag = false;
			Sheet tcSheet = tcWorkbook.getSheet(0);
			Cell[] headerRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;
			tcSheet = tcWorkbook.getSheet("RDP");
			headerRow = tcSheet.getRow(0);
			row = null;
			header = null;
			for (int i = 0; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				for (int j = 0; j < row.length; j++) {
					header = headerRow[j];
					cell = row[j];
					if (j==0 && header.getContents().trim().equalsIgnoreCase("OS_Browser_Version") && cell.getContents().trim().equalsIgnoreCase(osbrowserverision)) {
						flag = true;
					}else if(flag ==false){
						j= row.length;
					}
					if(flag){
						tcMap.put(header.getContents().trim(), cell.getContents().trim());
					}
				}
				if (flag) {
					return tcMap;
				}
			}
		}catch(Exception e){
			reportFail(e);
		}
		return null;
	}

	// Usage : This Method is used to to update Object properties file
	public static void setObjectProperties(LinkedHashMap<String, String>  ObjProperties) throws Exception {

		try{
			FileInputStream tcWorkbook;
			tcWorkbook = new FileInputStream(new File(ObjectPropertiesFolderPath));
			HSSFWorkbook wb = new HSSFWorkbook(tcWorkbook); //Access the workbook
			HSSFSheet tcSheet = wb.getSheet("Main");
			HSSFRow headerRow = tcSheet.getRow(0);

			int Current_Row =0;
			for (int i = 1; i <= tcSheet.getLastRowNum(); i++) {
				HSSFRow row = tcSheet.getRow(i);
				String Col_Data = row.getCell(2).getStringCellValue().trim();
				String Col_AppObjData="";
				if(Col_Data.equalsIgnoreCase(ObjProperties.get("OS_Browser_Version"))){
					Col_AppObjData = row.getCell(1).getStringCellValue().trim();
					if(Col_AppObjData.equalsIgnoreCase(ObjProperties.get("Application_Object"))){ 
						Current_Row = i;
						break;
					}
				}
			}

			HSSFRow Currrow;
			if(Current_Row==0){
				int count = tcSheet.getLastRowNum();
				tcSheet.createRow(count+1).createCell(0);
				Currrow = tcSheet.getRow(count+1);
			}else 	Currrow = tcSheet.getRow(Current_Row);			        

			for (int column = 0; column < headerRow.getPhysicalNumberOfCells() ; column++) {
				HSSFCell CurrentHeaderRow = headerRow.getCell(column);
				Currrow.createCell(column);
				HSSFCell Currentrow = Currrow.getCell(column);
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("OS_Browser_Version")) Currentrow.setCellValue(ObjProperties.get("OS_Browser_Version"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Sno")) Currentrow.setCellValue(String.valueOf(Currentrow.getRowIndex()));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Application_Object")) Currentrow.setCellValue(ObjProperties.get("Application_Object"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Browser")) Currentrow.setCellValue(ObjProperties.get("Browser"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("BrowserVersion")) Currentrow.setCellValue(ObjProperties.get("BrowserVersion"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Height")) Currentrow.setCellValue(ObjProperties.get("Height"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Width")) Currentrow.setCellValue(ObjProperties.get("Width"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Location_X")) Currentrow.setCellValue(ObjProperties.get("Location_X"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Location_Y")) Currentrow.setCellValue(ObjProperties.get("Location_Y"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("BackGround_Color")) Currentrow.setCellValue(ObjProperties.get("BackGround_Color"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Text_Color")) Currentrow.setCellValue(ObjProperties.get("Text_Color"));
				else if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Snapshot")) Currentrow.setCellValue(ObjProperties.get("Snapshot"));
			}
			tcWorkbook.close(); //Close the InputStream

			FileOutputStream fileout = new FileOutputStream(new File(ObjectPropertiesFolderPath));
			wb.write(fileout);
			fileout.close();
			tcWorkbook.close();

		}catch(Exception e){
			System.out.println(e);
		}

	}


	//Usage : This method reads and returns the machine ID's where Hubs and node would execute. This will only return machine ID's where in Test Case is considered for test execution.
	public static LinkedHashMap<String, String> getHubandNodeData() throws Exception {
		LinkedHashMap<String, String> tcMaposbrowserversions = new LinkedHashMap<String, String>();
		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			Sheet tcSheet = tcWorkbook.getSheet("Main");
			Cell[] headerRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;
			row = null;
			header = null;

			for (int i = 1; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				for (int j = 1; j < row.length; j++) {
					header = headerRow[j];
					cell = row[j];
					if (j>2 && header.getContents().trim().equalsIgnoreCase(AutomationPack) && cell.getContents().trim().equalsIgnoreCase("Yes")){
						String stros_browser_ver = row[3].getContents().trim().toLowerCase();
						//System.out.println(stros_browser_ver);
						if(stros_browser_ver==null) stros_browser_ver ="";
						if(!stros_browser_ver.isEmpty()){
							tcMaposbrowserversions.put(stros_browser_ver,  "");
						}else{
							LinkedHashMap<String, String> tcMaptemp = new LinkedHashMap<String, String>();
							tcMaptemp = getTracibilityData(row[0].getContents().trim());
							Iterator<Entry<String, String>> it = tcMaptemp.entrySet().iterator();
							while(it.hasNext()){
								String OS_browservesion = it.next().toString().replace("=", "");
								tcMaposbrowserversions.put(OS_browservesion, "");
							}
						}
					}
				}
			}
		}catch(Exception e){
			reportFail(e);
		}
		return tcMaposbrowserversions;
	}

	//Usage: This is used to run a java fork from Build.xml at the end of test execution
	public static void export_Results(String CurrentReportHtml) {
		try{
			String Htmlpath = ReportPath;
			System.out.println("Htmlpath:"+Htmlpath);
			if(!HTMLSharedLocation.trim().isEmpty()){
				DateFormat dateFormat = new SimpleDateFormat("ddMMMyy_hhmm");
				if(!new File(HTMLSharedLocation + "\\Test_Results\\").isDirectory()) System.out.println("Check out HTML Shared Location path. Provide valid path to export HTML results to shared locations. Current path provided is : "+HTMLSharedLocation + "\\Test_Results\\");
				
				String localScreensPath = System.getProperty("user.dir")+"/screenshots/";
				String localReportsPath = Htmlpath.replace(CurrentReportHtml+".html", "");
				String SharedScreenShotsPath= HTMLSharedLocation + "\\screen-shots\\" + BuildRelease + "_"+ TestExecution + "_"+ dateFormat.format(new Date());
				String SharedReportsPath= HTMLSharedLocation + "\\Test_Results\\" + BuildRelease + "_"+ TestExecution + "_"+ dateFormat.format(new Date());

				File localReports = new File(localReportsPath);
				File SharedReports = new File(SharedReportsPath);
				File localSnaps = new File(localScreensPath);
				File SharedSnaps = new File(SharedScreenShotsPath);

				FileUtils.copyDirectory(localReports, SharedReports);
				FileUtils.copyDirectory(localSnaps, SharedSnaps);

				Htmlpath = SharedReportsPath + "\\"+ CurrentReportHtml +".html";
				System.out.println("Latest Path:"+Htmlpath);				
			}		
			 if(sendEmail.trim().equalsIgnoreCase("Y")) sendEmail(Htmlpath);
		}catch(Exception e){
			reportFail(e);
		}
	}

	//Rounding to number of places
	public static double round(double value, int places) {
		if (places < 0) throw new IllegalArgumentException();

		BigDecimal bd = new BigDecimal(value);
		bd = bd.setScale(places, RoundingMode.HALF_UP);
		return bd.doubleValue();
	}


	//Usage: This is used to retrieve Traceability  of data from test data excel to execute test case across multiple browser versions.
	public static LinkedHashMap<String, String>  getTracibilityData(String testID) throws Exception {

		LinkedHashMap<String, String> tcMaptemp = new LinkedHashMap<String, String>();

		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			Sheet tcSheet = tcWorkbook.getSheet("RDP_Tracebility");
			Cell[] headerRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;
			row = null;
			header = null;
			for (int i = 1; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				for (int j = 1; j < row.length; j++) {
					header = headerRow[j];
					cell = row[0];
					if (cell.getContents().trim().equalsIgnoreCase(testID)) {
						cell = row[j];
						if (cell.getContents().trim().equalsIgnoreCase("Y")) {
							tcMaptemp.put(header.getContents().trim(),  "");
						}
					}
				}
			}
		}catch(Exception e){
			reportFail(e);
		}
		return tcMaptemp;
	}

	//Usage: This method reads the Node related data like browsers, Browser versions , Hub Details and Node Details.
	public static LinkedHashMap<String, String> getNodeData(String machineid) throws Exception {

		LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();

		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			boolean flag = false;

			Sheet tcSheet = tcWorkbook.getSheet(0);
			Cell[] headerRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;
			tcSheet = tcWorkbook.getSheet("RDP");
			headerRow = tcSheet.getRow(0);
			row = null;
			header = null;
			for (int i = 0; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				for (int j = 1; j < row.length; j++) {
					header = headerRow[j];
					cell = row[j];
					if (j==1 && header.getContents().trim().equalsIgnoreCase("Machine_ID") && cell.getContents().trim().equalsIgnoreCase(machineid)) {
						flag = true;
					}else if(flag ==false) j= row.length;

					if(flag){
						tcMap.put(row[2].getContents().trim().toLowerCase(),  row[4].getContents().trim());
						// System.out.println( row[2].getContents().trim().toLowerCase()  +"  = " +  row[4].getContents().trim());
						flag=false;
					}
				}
			}
		}catch(Exception e){
			reportFail(e);
		}
		return tcMap;
	}

	//Usage: This method will return all the list of all node machine ID available from Excel returns LinkedHashmap
	public static LinkedHashMap<String, String> getRemoteNodes() throws Exception {
		LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();

		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));

			Sheet tcSheet = tcWorkbook.getSheet("RDP");
			Cell[] headerRow = tcSheet.getRow(0);
			tcSheet = tcWorkbook.getSheet("RDP");
			headerRow = tcSheet.getRow(0);
			for (int i = 0; i < tcSheet.getRows(); i++) {
				String rowdata =tcSheet.getRow(i)[1].getContents().trim().toLowerCase();
				if(rowdata.isEmpty() || rowdata ==null) break;
				if (headerRow[1].getContents().trim().equalsIgnoreCase("Machine_ID"))	tcMap.put(rowdata,  "");
			}
		}catch(Exception e){
			reportFail(e);
		}
		return tcMap;
	}

	//Usage: This method will return all the list of all node machine ID available from Excel returns String with Spaces between them. This can be used to clear all nodes calling Clearhubandnodes(nodes)
	//Usage: This method will return all the list of all node machine ID available from Excel but returns in string args 
	public static String getRemoteNodesargs() throws Exception {

		String nodes="";
		try{
			LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();
			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			String localMachine = java.net.InetAddress.getLocalHost().getHostName();
			Sheet tcSheet = tcWorkbook.getSheet("RDP");
			Cell[] headerRow = tcSheet.getRow(0);
			tcSheet = tcWorkbook.getSheet("RDP");
			headerRow = tcSheet.getRow(0);
			for (int i = 1; i < tcSheet.getRows(); i++) {
				String rowdata =tcSheet.getRow(i)[1].getContents().trim().toLowerCase();
				if(rowdata.isEmpty() || rowdata ==null) break;
				if (headerRow[1].getContents().trim().equalsIgnoreCase("Machine_ID"))	tcMap.put(rowdata,  "");
			}
			for( Entry<String, String> entry : tcMap.entrySet()){
				String currentnode = entry.getKey().toString();
				if(!currentnode.equalsIgnoreCase(localMachine)){
					if(nodes.isEmpty()){
						nodes=currentnode;
					}else{
						nodes=nodes+" "+currentnode;
					}
				}
			}
		}catch(Exception e){
			reportFail(e);
		}
		return nodes;
	}

	//Usage : This methods is used to read application specific test data from test excel
	//Usage: This method is used to read all application specific test data.
	public static   LinkedHashMap<String, String> getTestData(String testId,String osBrowserVersion) throws Exception {
		//Helper.testID = testId;
		LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();
		String SheetNameandRow="";
		boolean flag = false;
		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			int sheetCount = tcWorkbook.getNumberOfSheets();
			String sheetName[] = tcWorkbook.getSheetNames();
			Cell cell = null;

			Sheet tcSheet = tcWorkbook.getSheet(0);
			Cell[] hraederRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;

			//To check the browser type and version 
			if(osBrowserVersion.isEmpty()){
				for (int i = 0; i < tcSheet.getRows(); i++) {
					row = tcSheet.getRow(i);
					for (int j = 0; j < row.length; j++) {
						header = hraederRow[j];
						cell = row[j];
						if (j==0 && header.getContents().trim().equalsIgnoreCase(testIdHeader) && cell.getContents().trim().equalsIgnoreCase(testId)) {
							String browserversion =row[3].getContents().trim(); //OS BROWSER Version on Main sheet position is 3 now
							if(browserversion==null) browserversion="";
							tcMap.put("OS_Browser_Version",browserversion);
							break;
						}else{
							j= row.length;
						}
					}
				}
			}else{
				tcMap.put("OS_Browser_Version",osBrowserVersion);
			}

			// For Author Sheet and Component Details sheet
			for (int k = 3; k <= sheetCount; k++) {
				tcSheet = tcWorkbook.getSheet(sheetName[k]);
				String SheetName =tcSheet.getName();
				hraederRow = tcSheet.getRow(0);
				row = null;
				header = null;
				for (int i = 0; i < tcSheet.getRows(); i++) {
					row = tcSheet.getRow(i);
					for (int j = 0; j < row.length; j++) {
						header = hraederRow[j];
						cell = row[j];
						if (j==0 && header.getContents().trim().equalsIgnoreCase(testIdHeader) && cell.getContents().trim().equalsIgnoreCase(testId)) {
							flag = true;
							SheetNameandRow=SheetName+":"+i;
							System.out.println("In Sheet ::   " + tcSheet.getName() );
						}else if(flag ==false){
							j= row.length;
						}
						if(flag){
							String cellcontents="";
							if(cell.getContents().trim()==null){
								cellcontents="";
							}else{
								cellcontents = cell.getContents().trim();
								System.out.println("header :   " +  header.getContents().trim() +"      Contents:        " +  cell.getContents().trim());
							}
							tcMap.put(header.getContents().trim(), cellcontents);
						}
					}
					if (flag) {
						if(tcMap.containsKey("ReQuote_Reference")==true){
							if(!tcMap.get("ReQuote_Reference").isEmpty()) {
								tcMap.put("SheetnameandRow", SheetNameandRow + "-"+ tcMap.get("ReQuote_Reference"));
							}else tcMap.put("SheetnameandRow", SheetNameandRow);
						}else{
							tcMap.put("SheetnameandRow", SheetNameandRow);
						}
						return tcMap;
					}
				}
			}
		}catch(Exception e){
			reportFail(e);
		}

		if (flag) {
			tcMap.put("SheetnameandRow", SheetNameandRow);
			return tcMap;
		}else{
			return null;
		}

	}

	public static LinkedHashMap<String, String> setData(LinkedHashMap<String, String> data){
		//		LocalDriver.setTestdata(data);
		return data;
	}



	public static int getTestCaseCountFromSheet(String sheetName, String componentName) {
		int countOfComponents = 0;

		try{
			//System.out.println("Sheet Name : " + sheetName + "   Component Name : " + componentName);
			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			Sheet tcSheet = tcWorkbook.getSheet(sheetName);
			Cell[] row = null;
			//Get the test start row
			System.out.println("total rows : " + tcSheet.getRows());
			for (int i = 1; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				//System.out.println("row[0] : " + row[0]);
				//System.out.println(row.length + " : and : "+row[0].getContents());
				cell = row[0];
				if (cell.getContents().trim().equalsIgnoreCase(componentName)){
					//System.out.println("cell.getContents() " + cell.getContents());
					countOfComponents = countOfComponents + 1;
					
				}
					
			}	

		} catch (Exception e) {
			e.printStackTrace();
		}
		return countOfComponents;
	}


	public static LinkedHashMap<String, String> testsheet_DetailedInformation(String sheetName, String componentName, int rowNumber) {
		//	public static LinkedHashMap<String, String> getComponentData(String componentName, int rowNumber) {

		LinkedHashMap<String, String> tcMap = new LinkedHashMap<String, String>();
		try{
			//System.out.println("inside getComponentData");
			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Sheet tcSheet = tcWorkbook.getSheet(sheetName);
			Cell[] row1 = null;
			Cell [] headerRow = null;
			Cell cell = null;
			Cell header = null;
			headerRow = tcSheet.getRow(0);
			row1 = null;											
			row1 = tcSheet.getRow(rowNumber);				
			for (int j = 0; j < row1.length; j++) {
				cell = row1[j];
				header = headerRow[j];
				//System.out.println(header.getContents());
				//System.out.println(cell.getContents());
				if(header.getContents().trim().equalsIgnoreCase("")){
					break;
				}
				tcMap.put(header.getContents().trim(), cell.getContents().trim());				
			}

		}catch(Exception e){
			reportFail(e);
		}		
		//System.out.println(tcMap);
		return tcMap;		
	}		
	public static int getRowNumber(String sheetName, String componentName) {
		int rowNumber = 0;
		
		try{

			Workbook tcWorkbook = Workbook.getWorkbook(new File(TestDataFolderPath));
			Cell cell = null;
			Sheet tcSheet = tcWorkbook.getSheet(sheetName);
			Cell[] row = null;
			//Get the test start row
			for (int i = 1; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				cell = row[0];
				if (cell.getContents().trim().equalsIgnoreCase(componentName)){
					//System.out.println("cell.getContents() " + cell.getContents());
					rowNumber = i;
					break;
					//System.out.println("rowCount " + rowCount);
				}
					
			}	
	
		} catch (Exception e) {
			e.printStackTrace();
		}
		return rowNumber;
	}
	
	public static void sendEmail(String resultfilepath) throws IOException{
		System.out.println("HERE "+resultfilepath);
		FileInputStream inp = new FileInputStream(new File("").getAbsolutePath().toString() +  "\\runtime.properties");
		Properties props = new Properties();
		props.load(inp);
		//executiontype
	       String execution_type =System.getenv("TestExecution");
	        if(execution_type==null){
	        	execution_type = TestDataProvider.TestExecution;
	        }
	        String ProjectBuildType = System.getenv("BuildRelease");
	        if(ProjectBuildType==null){
	        	ProjectBuildType = TestDataProvider.BuildRelease;
	        }
	        String Cycle = System.getenv("Cycle");
	        if(Cycle==null){
	        	Cycle = TestDataProvider.Cycle;
	        }
		
		System.out.println(resultfilepath);
		System.out.println("Test :"+ props.getProperty("totaltestcases"));
		String localMachine = java.net.InetAddress.getLocalHost().getHostName();  
		String logpath="";
		if(resultfilepath.contains(":")) logpath="\\\\"+ localMachine + "\\" +resultfilepath.replace(":", "$");
		else logpath = resultfilepath;

		Properties properties = System.getProperties();
		properties.setProperty("mail.smtp.host", "smtp.pru.local");
		properties.setProperty("mail.smtp.port", "25");
		// Get the default Session object.
		Session session = Session.getDefaultInstance(properties);
		try{
			MimeMessage message = new MimeMessage(session);
			message.setFrom(new InternetAddress(Emailfrom));		
			for (int i = 0; i < TestDataProvider.Emailtolist.split(";").length; i++)  message.addRecipient(Message.RecipientType.TO, new InternetAddress(TestDataProvider.Emailtolist.split(";")[i]));
			DateFormat dateFormat = new SimpleDateFormat("dd-MMM-HH:mm:ss");
			Date date = new Date();
			String dateformat = dateFormat.format(date).toString();
			message.setSubject("PruWealth: Automation Test Execution Results '"+execution_type+"' run -"+dateformat);
			int Total_PassedCasesData=0,Total_TestCasesData=0;
			Total_TestCasesData = Integer.parseInt(props.getProperty("totaltestcases"));
			Total_PassedCasesData = Integer.parseInt(props.getProperty("totalPassed")) ;

			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			TimeZone utc = TimeZone.getTimeZone("UTC");
			format.setTimeZone(utc);

			String startTime = props.getProperty("startTime");
			String endTime = props.getProperty("endTime");
			double duration;                             
			try {
				duration = (format.parse(endTime).getTime())-(format.parse(startTime).getTime());

				duration=duration/3600000;
				Double finalDuration = round(duration,2);                                                           

				System.out.println("logpath:"+logpath);
				int Total_FailedCasesData= Total_TestCasesData-Total_PassedCasesData;
				String messagecontents="<p style=\"font-family:Segoe UI;font-size:12px\" >Hello, <br> <br> PruWealth:Automation test execution is now completed. Please go through the automation results <a href=' "+ logpath + "' target='_blank'>URL</a>.";
				messagecontents = messagecontents + "<table class=MsoNormalTable border=0 cellspacing=0 cellpadding=0 width=459 style='width:344.0pt;margin-left:-1.15pt;border-collapse:collapse'><tr style='height:15.0pt'><td width=459 nowrap colspan=4 style='width:344.0pt;border:solid windowtext 1.0pt;background:#F2F2F2;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:black'>Test Execution Summary</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td></tr><tr style='height:15.0pt'><td width=125 style='width:94.0pt;border:solid windowtext 1.0pt;border-top:none;background:#365F91;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:white'>Total Test Cases </span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=135 style='width:101.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#365F91;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:white'>Passed</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=64 style='width:48.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#365F91;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:white'>Failed</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=135 style='width:101.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#365F91;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:white'>Duration (in Hrs)</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td></tr><tr style='height:15.0pt'><td width=125 style='width:94.0pt;border:solid windowtext 1.0pt;border-top:none;background:#BFBFBF;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:#1F497D'>"+Total_TestCasesData+"</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=135 style='width:101.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#92D050;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:#1F497D'>"+Total_PassedCasesData+"</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=64 style='width:48.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#FABF8F;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:#1F497D'>"+Total_FailedCasesData+"</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td><td width=135 style='width:101.0pt;border-top:none;border-left:none;border-bottom:solid windowtext 1.0pt;border-right:solid windowtext 1.0pt;background:#DCE6F1;padding:0cm 5.4pt 0cm 5.4pt;height:15.0pt'><p class=MsoNormal align=center style='mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;text-align:center'><b><span style='font-size:11.0pt;font-family:Calibri,sans-serif;color:#1F497D'>"+finalDuration+"</span></b><span style='font-size:11.0pt;font-family:Calibri,sans-serif'><o:p></o:p></span></p></td></tr></table>";
				messagecontents = messagecontents + "<br><br> Regards,<br> Regression Team<P> <P style=\"font-family:Segoe UI;font-size:10px\"> Note : Please open automation test results on Firefox or Chrome browsers only.</P>";
				message.setContent(messagecontents, "text/html");
				Transport.send(message);
				System.out.println("Email sent successfully....");
				System.out.println("Updating Dashboard..");  
				updateDashboard(execution_type,ProjectBuildType,Cycle,Total_TestCasesData,Total_PassedCasesData,(Total_TestCasesData-Total_PassedCasesData),finalDuration,logpath);
				System.out.println("Dashboard Updated successfully..");
			} catch (ParseException e) {                                                                       
				e.printStackTrace();
			}
		}catch (MessagingException mex) {
			System.out.println("Sending email failed....");
			mex.printStackTrace();
		}

	}

	
		
		

public static  void updateDashboard(String Build_Type,String Project_Build,String cycle,int Total_Test_Cases,int Passed,int Failed,double Execution_Time,String HTML_Results) throws IOException{
		
		System.out.println(Build_Type+ ","+ Project_Build+ ","+ cycle+ ","+ Total_Test_Cases+ ","+ Passed+ ","+ Failed+ ","+ Execution_Time+ ","+ HTML_Results);

		String curCycle = null;
		String runType = null;
		String[] runs = new String[10]; 
		runs[0] ="Run0";


		if(Project_Build==null){
			Project_Build = ProjectBuildType + "-" + Calendar.getInstance().get(Calendar.YEAR);
		}
		if(cycle==null){
			Cycle = Cycle.toUpperCase();
		}

		try{
			FileInputStream tcWorkbook;

			String DashboardPath  =HTMLSharedLocation+"\\DashBoard.xls";
			File Dashboard  = new File(DashboardPath);
			System.out.println("Dashboard file -- "+DashboardPath);
			
			tcWorkbook = new FileInputStream(Dashboard.toString()); //	
			HSSFWorkbook wb = new HSSFWorkbook(tcWorkbook); //Access the workbook
			HSSFSheet tcSheet = wb.getSheetAt(0);
			HSSFRow headerRow = tcSheet.getRow(0);
			if (tcSheet.getLastRowNum() > 0){
				for (int rnum = 1;rnum <= tcSheet.getLastRowNum();rnum++){
					if ((tcSheet.getRow(rnum).getCell(2).getStringCellValue()).equalsIgnoreCase(Project_Build)) {											
						curCycle =tcSheet.getRow(rnum).getCell(3).getStringCellValue();


						if (tcSheet.getRow(rnum).getCell(2).getStringCellValue().equalsIgnoreCase(Project_Build) && curCycle.equalsIgnoreCase(Cycle)) {											
							runType=tcSheet.getRow(rnum).getCell(1).getStringCellValue();																

							if (tcSheet.getRow(rnum).getCell(2).getStringCellValue().equalsIgnoreCase(Project_Build) && curCycle.equalsIgnoreCase(Cycle) && runType.equalsIgnoreCase(Build_Type)) {											
								int i = 0;
								runs[i] = tcSheet.getRow(rnum).getCell(4).getStringCellValue();

								i++;	

							}

						}						
					}						        	
				}
			}

			String Run = runs[0].split("Run")[1];
			int intRun = Integer.parseInt(Run);					      

			int Row = tcSheet.getLastRowNum() + 1;			       		      
			HSSFRow Currrow = tcSheet.getRow(Row);
			if(Currrow == null){
				tcSheet.createRow(Row);						
			}
			tcSheet.getRow(Row).createCell(0).setCellValue(Row);
			for (int column = 1; column < 11; column++) {
				HSSFCell CurrentHeaderRow = headerRow.getCell(column);

				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Build_Type")) { tcSheet.getRow(Row).createCell(column).setCellValue(Build_Type);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Project_Build")) { tcSheet.getRow(Row).createCell(column).setCellValue(Project_Build);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Cycle")) { tcSheet.getRow(Row).createCell(column).setCellValue(Cycle);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Run_Type")) { tcSheet.getRow(Row).createCell(column).setCellValue("Run"+(intRun+1));	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Total Test Cases")) { tcSheet.getRow(Row).createCell(column).setCellValue(Total_Test_Cases);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Passed")) { tcSheet.getRow(Row).createCell(column).setCellValue(Passed);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Failed")) { tcSheet.getRow(Row).createCell(column).setCellValue(Failed);	}
				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("Execution Time (In Hrs)")) { tcSheet.getRow(Row).createCell(column).setCellValue(Execution_Time);	}

				if (CurrentHeaderRow.getStringCellValue().trim().equalsIgnoreCase("HTML_Results")) { 																								
					tcSheet.getRow(Row).createCell(column).setCellValue((RichTextString) new HSSFRichTextString("Result Summary"));
					CellStyle hlink_style = wb.createCellStyle();
					Font hlink_font = wb.createFont();
					hlink_font.setUnderline(Font.U_SINGLE);
					hlink_font.setColor(HSSFColor.BLUE.index);
					hlink_style.setFont(hlink_font);
					HSSFHyperlink link = new HSSFHyperlink(HSSFHyperlink.LINK_URL);
					link.setAddress(HTML_Results);
					tcSheet.getRow(Row).getCell(column).setHyperlink(link);
					tcSheet.getRow(Row).getCell(column).setCellStyle(hlink_style);								
				}							
			}

			tcWorkbook.close(); //Close the InputStream
			FileOutputStream fileout = new FileOutputStream(Dashboard);
			wb.write(fileout);
			fileout.close();
			tcWorkbook.close();

		}catch(Exception e){
			System.out.println(e);
		}

	}


}
