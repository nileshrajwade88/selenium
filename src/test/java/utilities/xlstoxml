
	/**
	 * @author      Sudhindra Immidi
	 */
	package com.pru.utilities;
	import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.Properties;
import java.util.Map.Entry;
import java.util.TimeZone;

import org.apache.http.util.TextUtils;

import jxl.Cell;
import jxl.CellType;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import com.pru.utilities.ConfigProperties;

	public class XlsToXml extends ConfigProperties {
		    
		public static LinkedHashMap<String, LinkedHashMap<String, String>> tcMap = new LinkedHashMap<String, LinkedHashMap<String, String>>();
		public static  int TotalTestcases = 0;
		public String configFile = "test-data.properties";
		String testRunStatusColNumber="";
		
		public String toXml(String excelFile) throws IOException, BiffException, InterruptedException {
		    try {
		    	String className, methodName, paramName, runValue;
		        String xmlLine = "";
		        Cell cell = null;
		        Workbook workbook = Workbook.getWorkbook(new File(excelFile));
		        System.out.println(AutomationPack);
		        //Reading values from Jenkins Environment Variables
		       String  isJenkins = System.getenv("AutomationPack");
			    if(!TextUtils.isEmpty(isJenkins))   {
			    	AutomationPack = System.getenv("AutomationPack");
			    	concurentthread = System.getenv("ParallelExecutionCount");
			    }
			    
		        xmlLine += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
		        xmlLine +="<!DOCTYPE suite SYSTEM \"http://testng.org/testng-1.0.dtd\" >";
		        xmlLine += "<suite name=\"My Test Suite\" parallel=\"tests\" thread-count=\""+concurentthread +"\" group-by-instances=\"true\">\n";    // \" group-by-instances=true
		        xmlLine += "<listeners>\n";
		        xmlLine +="<listener class-name=\"org.uncommons.reportng.HTMLReporter\"/>\n";
		        xmlLine += " <listener class-name=\"org.uncommons.reportng.JUnitXMLReporter\"/>";
		        xmlLine += "<listener class-name=\"com.pru.utilities.TestSuiteListener\" />\n";
		        xmlLine += "</listeners>" + "\n"; 
	          	        	   
	            Sheet s = workbook.getSheet(0);
	            Cell[] row = null;
	            Cell[] hraederRow = s.getRow(0);
	            Cell header = null;
	            
	            // testRunStatusColNumber  - Write code
	            for (int autopack = 0; autopack < hraederRow.length; autopack++) {
	               String headcol = hraederRow[autopack].getContents().trim(); 
	            	if (AutomationPack.equalsIgnoreCase(headcol)) testRunStatusColNumber = String.valueOf(autopack);
	            }
	            
	            if(testRunStatusColNumber.isEmpty()){
	            	System.out.println("#######################################Provide valid Automation pack name############################################");
	            }
	            
	            for (int i = 1; i < s.getRows(); i++) {
	                row = s.getRow(i);
	                className=null; methodName=null; paramName=null;  runValue=null;
	                String testRunBrowserversiondata="";
	                
	                if (row[0].getType() != CellType.EMPTY && row[Integer.parseInt(testRunStatusColNumber)].getContents().trim().equalsIgnoreCase("Yes")) {
	                	 for (int j = 0; j < row.length; j++) {
	                    		header = hraederRow[j];
		                    	cell = row[j];
		                    	if(header.getContents().trim().equalsIgnoreCase(testClassHeader)){
		                    		className=cell.getContents().trim();
		                    	}else if(header.getContents().trim().equalsIgnoreCase(testMethodNameHeader)){	                    		
		                    		methodName=cell.getContents().trim();
		                    	}else if(header.getContents().trim().equalsIgnoreCase(testIdHeader)){
		                    		paramName=cell.getContents().trim();	                    		
		                    	}else if(header.getContents().trim().equalsIgnoreCase(AutomationPack)){
		                    		runValue=cell.getContents().trim();
		                    	}else if(header.getContents().trim().equalsIgnoreCase(testosbrowserVersion)){
		                    		if(AutomationPack.equalsIgnoreCase("Cross Browser Pack")){
		                    			testRunBrowserversiondata=cell.getContents().trim();
		                    		}else{
//		                    			testRunBrowserversiondata = RegressionPackBrowser;
		                    			testRunBrowserversiondata=cell.getContents().trim(); //Change it later to RegressionpackBrowser
		                    		}
		                    	}
	                      }
//	                     System.out.println("Inside :"+ className + methodName + paramName);
	                }else{
	                	runValue = "Yesnot";
	                }
//	            	System.out.println(testRunBrowserversiondata);
	            	
	            	boolean blnOSbrowseravailable=false;
	            	
	            	if(runValue.equalsIgnoreCase("Yes")){
	            		if(testRunBrowserversiondata.isEmpty()){
	                		if( tcMap.containsKey(paramName)){
	                			 blnOSbrowseravailable=true;
	                			for( Entry<String, String> entry : tcMap.get(paramName).entrySet()){
	                				TotalTestcases=TotalTestcases+1;
	                    	    	String currentosbrowser = entry.getKey().toString();
	                    	    	xmlLine += "<test name=\"" + paramName+ " : " + methodName + " - " + currentosbrowser + "\">" + "\n";
	                    	        xmlLine += "<classes>" + "\n";
	                    	    	xmlLine += "<class name=\"" +  className + "\">" + "\n";
	                                xmlLine += "<methods>" + "\n";
	                                xmlLine += "<parameter name=\"osbrowserVersion\" value=\""+ currentosbrowser + "\"/>\n";
	                        	    xmlLine += "<parameter name=\"TestId\" value=\"" + paramName + "\"/>\n";
	                                xmlLine += "<include name=\"" + methodName + "\"/>" + "\n";
	                                xmlLine += "</methods>" + "\n";
	                                xmlLine += "</class>" + "\n";
	                                xmlLine += "</classes>"+ "\n";
	                	            xmlLine += "</test>" + "\n";
	                    		}
	                		}
	                	}
	            	}
	            	
	            	if(runValue.equalsIgnoreCase("Yes") && blnOSbrowseravailable==false){
	            		TotalTestcases=TotalTestcases+1;
	            		xmlLine += "<test name=\"" + paramName+ " : " + methodName + " - " + testRunBrowserversiondata + "\">" + "\n";
	        	        xmlLine += "<classes>" + "\n";
	        	    	xmlLine += "<class name=\"" +  className + "\">" + "\n";
	                    xmlLine += "<methods>" + "\n";
	                    xmlLine += "<parameter name=\"osbrowserVersion\" value=\""+ testRunBrowserversiondata + "\"/> \n";
	            	    xmlLine += "<parameter name=\"TestId\" value=\"" + paramName + "\"/>\n";
	                    xmlLine += "<include name=\"" + methodName + "\"/>" + "\n";
	                    xmlLine += "</methods>" + "\n";
	                    xmlLine += "</class>" + "\n";
	                    xmlLine += "</classes>"+ "\n";
	    	            xmlLine += "</test>" + "\n";
	            	}
	            }  
	            xmlLine += "</suite>" + "\n"; 
	            workbook.close();
	            System.out.println("TotalTestcases for execution:"+TotalTestcases);
	            
	            FileOutputStream out = new FileOutputStream("runtime.properties");
	            Properties props = new Properties();
	            props.setProperty("totaltestcases",  String.valueOf(TotalTestcases));  
	            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	            TimeZone utc = TimeZone.getTimeZone("UTC");
	            format.setTimeZone(utc);
	            props.setProperty("startTime",format.format(new Date()).toString());     
	            props.store(out, null);
	            out.close();
	            
		        return xmlLine;
		    } catch (UnsupportedEncodingException e) {
		        System.err.println(e.toString());
		    }
		    return null;
		}
		
	   public static void  gettracibilityData(String excelFile) throws Exception {
			
		   Workbook tcWorkbook = Workbook.getWorkbook(new File(excelFile));
			Cell cell = null;
			
			Sheet tcSheet = tcWorkbook.getSheet("RDP_Tracebility");
			Cell[] headerRow = tcSheet.getRow(0);
			Cell[] row = null;
			Cell header = null;
			row = null;
			header = null;
			for (int i = 1; i < tcSheet.getRows(); i++) {
				row = tcSheet.getRow(i);
				LinkedHashMap<String, String> tcMaptemp = new LinkedHashMap<String, String>();
				for (int j = 1; j < row.length; j++) {
					header = headerRow[j];
					cell = row[j];
					if (cell.getContents().trim().equalsIgnoreCase("Y")) {
						tcMaptemp.put(header.getContents().trim(),  "");
					}
				}
				tcMap.put(row[0].getContents().trim(),tcMaptemp);
			}
//			System.out.println(tcMap);
		}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 try{
			 System.out.println("***********************");
				XlsToXml x = new XlsToXml();
				File newTextFile = new File(TestDataXml);
				FileWriter fw = new FileWriter(newTextFile);
				gettracibilityData(TestDataFolderPath);
				fw.write(x.toXml(TestDataFolderPath));
				fw.close();
				System.out.println("***********************");
		 }catch(Exception e){
			reportFail(e);
		 }
		 	
	}

}
