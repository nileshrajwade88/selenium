package com.pru.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.Authenticator;
import java.net.InetAddress;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.TimeZone;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpHost;
import org.apache.http.HttpResponse;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHttpEntityEnclosingRequest;
import org.apache.http.util.TextUtils;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.Platform;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.UnexpectedAlertBehaviour;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.HttpCommandExecutor;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;



@SuppressWarnings("deprecation")
public class TestBase {

	public static RemoteWebDriver driver=null;
	static String driverPath = "";
	public static WebDriverWait wait;
	static int waitTIme = 30;
	public static int failStepCount=0;
	public  static int  totalTestCases=0;
	public  static int  totalPassed=0;
	public  static int  totalFailed=0;
	public  static int  totalSkipped=0;


	public static String ProjectBuildType="";
	public static String Cycle="";
	public static String HTMLSharedLocation ="";
	public static LinkedHashMap<String, String> Testdata =	new LinkedHashMap<String, String>();
	public static LinkedHashMap<String, String> NewSheetTestData =	new LinkedHashMap<String, String>();
	public static LinkedHashMap<String, String> TempSheetTestData =	new LinkedHashMap<String, String>();
	public static LinkedHashMap<String, String> TransferTestData = new LinkedHashMap<String, String>();
	public static LinkedHashMap<String, String> ContributionDetails =	new LinkedHashMap<String, String>();
	public static LinkedHashMap<String, String> AdditionalInformationTestData =	new LinkedHashMap<String, String>();

	public static final String USERNAME = "sudhindra6";
	public static final String AUTOMATE_KEY = "P1jvqdGaykyhxTjzBLxX";
	public static final String BrowserStackURL = "http://" + USERNAME + ":" + AUTOMATE_KEY + "@hub-cloud.browserstack.com/wd/hub";

	public static ExecutorService Currentlogservice = Executors.newFixedThreadPool(1);
	public static ExecutorService ObjectsData = Executors.newFixedThreadPool(1);
	public static ExecutorService executorService = Executors.newFixedThreadPool(1);
	public static ConcurrentHashMap<String, Integer> testexecutions = new ConcurrentHashMap<String, Integer>();

	public static void setTestdata(LinkedHashMap<String, String> data) {
		Testdata= data;
		Testdata.put("Execution_Status", "PASSED");
		Testdata.put("Snapshot_Path", "../screen-shots/"+data.get("OS_Browser_Version")  +"/"+ driver.getCapabilities().getBrowserName() +"/" + new SimpleDateFormat("dd_MMM_yyyy").format( new Date()));
		System.out.println(data);
	}	

	public static String TestData(String strKey) {
		String testdata="";
		if (Testdata.containsKey(strKey)) {
			testdata=Testdata.get(strKey);
		}
		return testdata;
	}

	public static void browserStackSetup(String osbrowserverision,String testcaseID) {
		try{
			LinkedHashMap<String, String> griddata = new LinkedHashMap<String, String>();
			boolean blndriver=false;
			griddata =  TestDataProvider.getGridData(osbrowserverision);
			if(griddata.size()==0){
				ExtentReport.reportInfo("Expected OS browser version not available to execute: "+ osbrowserverision);
				Assert.assertFalse(true, "Expected OS browser version not available to execute");			
			}

			String browser=griddata.get("Browser").toLowerCase();
			String platform=griddata.get("OS").split(" ")[0];
			String platformversion=griddata.get("OS").split(" ")[1];
			String browserversion =griddata.get("Version");

			System.out.println("browser:"+browser + "  platform:"+platform +" platformversion:"+platformversion  +"  browserversion:"+browserversion );

			System.setProperty("proxySet", "true");
			System.setProperty("http.proxyHost", "lgproxy.pru.local");
			System.setProperty("http.proxyPort", "80");
			Authenticator.setDefault(new Authenticator() {
				protected PasswordAuthentication getPasswordAuthentication() {
					return new PasswordAuthentication("domain\\user","password".toCharArray());
				}
			});

			DesiredCapabilities caps = new DesiredCapabilities();
			caps.setCapability("browserstack.local", "true");
			String browserstackLocalIdentifier = System.getenv("BROWSERSTACK_LOCAL_IDENTIFIER");
			if(!TextUtils.isEmpty(browserstackLocalIdentifier))   	caps.setCapability("browserstack.localIdentifier", browserstackLocalIdentifier);

			if(platform.trim().equalsIgnoreCase("windows")) {
				caps.setCapability("os", platform.trim());
				caps.setCapability("os_version",platformversion.trim());
				caps.setCapability("browser", browser);
				caps.setCapability("browser_version", browserversion.trim());
				caps.setCapability("UNEXPECTED_ALERT_BEHAVIOUR", UnexpectedAlertBehaviour.ACCEPT);
			}else if(platform.trim().equalsIgnoreCase("ANDROID")) {
				caps.setCapability("browserName", browser);
				caps.setCapability("platform",griddata.get("OS"));
				caps.setCapability("device",griddata.get("Machine_ID"));
			}else{
				caps.setCapability("os", "OS X");
				caps.setCapability("os_version", griddata.get("OS"));
				caps.setCapability("browserstack.safari.enablePopups", "false");
				caps.setCapability("browser", browser);
				caps.setCapability("browser_version", browserversion.trim());
				caps.setCapability("UNEXPECTED_ALERT_BEHAVIOUR", UnexpectedAlertBehaviour.ACCEPT);
			}

			caps.setCapability("build", ConfigProperties.ProjectBuildType);
			caps.setCapability("project", ConfigProperties.ProjectName);
			caps.setCapability("browserstack.debug", "true");
			caps.setCapability("browserstack.autoWait",0) ;
			caps.setCapability("acceptSslCerts", "true");
			if (!browser.equalsIgnoreCase("IE")) caps.setCapability("acceptSslCerts", "true");// Self Signed Certificates will not work for IE browsers. Work around is implemented below
			if( platform.trim().equalsIgnoreCase("windows")) caps.setCapability("resolution", "1680x1050");
			else  caps.setCapability("resolution", "1600x1200");

			driver = new RemoteWebDriver(new URL(BrowserStackURL), caps);
			driver.get(ConfigProperties.AppURL);
			if (!browser.equalsIgnoreCase("IE"))  Thread.sleep(2500);
			driver.manage().window().maximize();
			if("Certificate Error: Navigation Blocked".equals(driver.getTitle())) { // Self Signed Certificates will not work for IE browsers. Work around is implemented here
				driver.get("javascript:document.getElementById('overridelink').click();");
				Thread.sleep(7000);
				if("Certificate Error: Navigation Blocked".equals(driver.getTitle())){
					driver.get("javascript:document.getElementById('overridelink').click();");
					Thread.sleep(4000);
				}
			}

			setTestCaseName(testcaseID+":"+osbrowserverision+ ":"+driver.getSessionId().toString() + ":1");
			currentexecutionlog("Executing : <B>" + testcaseID + "</B>  with Browser : <B>"+ driver.getCapabilities().getBrowserName().toUpperCase()  + "</B>  Version: <B>"+ driver.getCapabilities().getVersion() + "</B> on Operating System: <B>"+ griddata.get("OS") + "</B>");
			blndriver = true;

			if(driver==null ||blndriver==false ) ExtentReport.reportFail( "Unable to create Web driver instance on Browser stack cloud with browser :"+ browser + " version:" + browserversion);

		}catch(Exception e){
			ExtentReport.reportFail(e);
		}
	}

	//Usage: This method is used to create Remote Web Driver and connect to grid Hub.
	public static  void webDriverSetup(String osbrowserverision,String testcaseID) throws Exception {

		try{
			LinkedHashMap<String, String> griddata = new LinkedHashMap<String, String>();
			boolean blndriver=false;
			griddata =  TestDataProvider.getGridData(osbrowserverision);
			if(griddata.size()==0){
				ExtentReport.reportInfo("Expected OS browser version not available to execute: "+ osbrowserverision);
				ExtentReport.reportFail( "Expected OS browser version not available to execute");			
			}

			String nodemachine=griddata.get("Machine_ID");
			String browser=griddata.get("Browser");
			String hub=griddata.get("Hub");
			String platform=griddata.get("OS");
			String version =griddata.get("Version");
			//LocalDriver.setTestdataRDPName(nodemachine); 
			DesiredCapabilities capability = null;
			if(browser.equalsIgnoreCase("firefox")){
				System.out.println("Firefox");
				//FirefoxProfile profile = new FirefoxProfile( new File(System.getenv("APPDATA") + "\\Mozilla\\Firefox\\Profiles\\usv0hdql.default"));
				capability = DesiredCapabilities.firefox();
				capability.setBrowserName("firefox");
				//Code to download pdf file locally
				//capability.setCapability(FirefoxDriver.PROFILE, profile);
			}else if (browser.equalsIgnoreCase("safari")) {
				capability = DesiredCapabilities.safari();
				capability.setBrowserName("safari");
			}else if (browser.equalsIgnoreCase("IE")) {
				capability = DesiredCapabilities.internetExplorer();
				capability.setBrowserName("internet explorer");
				capability.setCapability(InternetExplorerDriver.IE_ENSURE_CLEAN_SESSION, true);
				capability.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
				capability.setCapability("requireWindowFocus", true);
			}else if (browser.equalsIgnoreCase("Edge")) {
				capability = DesiredCapabilities.edge();
				capability.setBrowserName("MicrosoftEdge");
			}else if (browser.equalsIgnoreCase("chrome")) {
				capability = DesiredCapabilities.chrome();
				ChromeOptions options = new ChromeOptions();
				options.addArguments("test-type");
				capability.setCapability(ChromeOptions.CAPABILITY, options);
				capability.setBrowserName("chrome");
			}

			if(testexecutions.containsKey(nodemachine)){
				if(testexecutions.get(nodemachine)==6){ //Refresh Node for every 5 executions to clear any memory issues
					Grid_Builder.restartNode(hub, nodemachine);
					testexecutions.replace(nodemachine,0);
					Grid_Builder.waitforNodeAvailability(nodemachine);
				}
			}else{
				testexecutions.put(nodemachine,0);
			}
			capability.setJavascriptEnabled(true);
			capability.setCapability(CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION,true);
			capability.setVersion(version);
			capability.setCapability(CapabilityType.TAKES_SCREENSHOT, true);
			capability.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
			if(platform.equalsIgnoreCase("Windows 8")){
				capability.setPlatform(Platform.WIN8); //Set platform to Windows 8
			}else if (platform.equalsIgnoreCase("Windows 8.1")){
				capability.setPlatform(Platform.WIN8_1); //Set platform to Windows 8.1
			}else {
				capability.setPlatform(Platform.WINDOWS); //Set platform to Windows 7
			}

			currentexecutionlog("Invoking Test case:<B> "+testcaseID + "</B> on RDP machine: <B>"+nodemachine +"</B>" );

			try{
				driver = new RemoteWebDriver(new URL("http://" + hub  + "/wd/hub"), capability);
				currentexecutionlog("Webdriver Instance created for Test case ID: "+ testcaseID);
				System.out.println("Invoking Web Driver........................................................");
				// For Publish
				driver.get(ConfigProperties.AppURL);
				driver.manage().window().maximize();
				driver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);				
				setTestCaseName(testcaseID+":"+osbrowserverision+ ":"+driver.getSessionId().toString() + ":1");
				String machineip = getIPOfNode(driver);
				currentexecutionlog("Executing : <B class=grey>" + testcaseID + "</B> on  Machine : <B> " + InetAddress.getByName(machineip).getHostName().replace(".production.local", "").toUpperCase() + "</B> with Browser : <B>"+ driver.getCapabilities().getBrowserName().toUpperCase()  + "</B>  Version: "+ driver.getCapabilities().getVersion());
				blndriver = true;
				testexecutions.replace(nodemachine, testexecutions.get(nodemachine) +1);
			}catch(Exception e){
				ExtentReport.reportInfo("Node Machine : "+ nodemachine + " :: "+ e.getMessage());
			}
			if(driver==null ||blndriver==false ) ExtentReport.reportFail( "Unable to create Web driver instance on the desired Remote Machine:"+nodemachine);
		}catch(Exception e){
			ExtentReport.reportFail(e);
		}
	}
	
	public static void openNewBrowser(String browser, String PDFURL){
		WebDriver browserdriver = null;
		try{  
				if(browser.equalsIgnoreCase("IE")){
					System.setProperty("webdriver.ie.driver", "C:\\Program Files (x86)\\Internet Explorer\\iexplore.exe");
					browserdriver = new ChromeDriver(); 
				}else if(browser.equalsIgnoreCase("IE")){
					System.setProperty("webdriver.chrome.driver", "C:\\grid\\chromedriver.exe");
					browserdriver = new InternetExplorerDriver(); 
				}				                  
				browserdriver.get(PDFURL);
				browserdriver.manage().window().maximize();      
            }catch(Exception e){
            	ExtentReport.reportFail(e);
            }
    }

	
	public static void logDriverInfo(){
		try{
			ExtentReport.reportInfo("------------------------------------------------------------------");
		}catch(Exception e){
			ExtentReport.reportFail(e);
		}
	}

	//Usage : to set Test Case Name
	public static void setTestCaseName(String name){
		Thread.currentThread().setName(name);
	}

	//Usage : to get Test Case Name
	public static String getTestCaseName(){
		return Thread.currentThread().getName();
	}

	//Usage: This Method is used to get the IP Address of the Remote Web Driver
	public static String getIPOfNode(RemoteWebDriver remoteDriver) {
		String hostFound = null;
		try {
			HttpCommandExecutor ce = (HttpCommandExecutor) remoteDriver.getCommandExecutor();
			String hostName = ce.getAddressOfRemoteServer().getHost();
			int port = ce.getAddressOfRemoteServer().getPort();
			HttpHost host = new HttpHost(hostName, port);
			DefaultHttpClient client = new DefaultHttpClient();
			URL sessionURL = new URL("http://" + hostName + ":" + port  + "/grid/api/testsession?session=" + remoteDriver.getSessionId());
			BasicHttpEntityEnclosingRequest r = new BasicHttpEntityEnclosingRequest("POST", sessionURL.toExternalForm());
			HttpResponse response = client.execute(host, r);
			InputStream contents = response.getEntity().getContent();
			StringWriter writer = new StringWriter();
			IOUtils.copy(contents, writer, "UTF8");
			JSONObject object = new JSONObject(writer.toString());
			URL myURL = new URL(object.getString("proxyId"));
			if ((myURL.getHost() != null) && (myURL.getPort() != -1)) {
				hostFound = myURL.getHost();
			}
			client.close();
		} catch (Exception e) {
			System.err.println(e);
		}
		return hostFound;
	}

	//Usage: This Method is used to know the IP address by HostName
	public static String getipaddressbyName(String hostName) throws UnknownHostException{
		InetAddress inetAddr = InetAddress.getByName(hostName);
		byte[] addr = inetAddr.getAddress();
		// Convert to dot representation
		String ipAddr = "";
		for (int i = 0; i < addr.length; i++) {
			if (i > 0) {
				ipAddr += ".";
			}
			ipAddr += addr[i] & 0xFF;
		}
		return ipAddr;
	}

	public static void TestcasesUpdate(){
		try{
			FileInputStream inp = new FileInputStream(new File("").getAbsolutePath().toString() +  "\\runtime.properties");
			Properties props = new Properties();
			props.load(inp);
			totalTestCases = Integer.parseInt(props.getProperty("totaltestcases"));
			TestBase.currentexecutionlog("Total no of test case(s) planned for this test execution session are  : <B class=blue> "+ totalTestCases + "</B>");
		}catch(Exception e){
			ExtentReport.reportFail("Unable to read no of test cases executing currently  "+ e );
		}
	}

	   public static void UpdateTestExecutionMatrix(){
	    	try{
	    		FileInputStream inp = new FileInputStream(new File("").getAbsolutePath().toString() +  "\\runtime.properties");
		        Properties props = new Properties();
		        props.load(inp);
		        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	            TimeZone utc = TimeZone.getTimeZone("UTC");
	            format.setTimeZone(utc);
	            
	            totalTestCases = Integer.parseInt(props.getProperty("totaltestcases"));
		        FileOutputStream out = new FileOutputStream(new File("").getAbsolutePath().toString() +  "\\runtime.properties");
	            props.setProperty("totaltestcases",  String.valueOf(totalTestCases));
	            props.setProperty("totalPassed",  String.valueOf(totalPassed));
	            props.setProperty("endTime",format.format(new Date()).toString());
	            props.store(out, null);
	            out.close();
	            
	            
	    	}catch(Exception e){
	    		ExtentReport.reportFail("Unable to read no of test cases executing currently");
	    	}
	    	
	    }

	public static void closeDriver(){
		driver.quit();
	}

	public static boolean verifyElementDisplayed(String objNameStr, WebElement objName, String testId) throws IOException, InterruptedException {
		try{
			scrollintoview(objName);
			//System.out.println("Displayed " + objName.isDisplayed());
			if(objName.isDisplayed()){
				System.out.println("Displayed "+ objNameStr);
				ExtentReport.reportPass("' "+ objNameStr + " ' is displayed. Element name is --> ' "+ objName.getText()+ " ' ");
				return true;
			} else {
				//System.out.println("Not Displayed "+ objNameStr);
	            ExtentReport.reportFail(objNameStr+" is not displayed. Failed screenshot", driver , "VerifyElementDisplayed",testId);
				return false;
			}
		} catch (NullPointerException e) {
			ExtentReport.reportFail(e);			 
			return false;
		}	
	}

	public static void click(String objNameStr, WebElement objName, String testId) throws IOException {
		try {
			int timeinseconds = 30;
			scrollintoview(objName);
			//System.out.println("Hi");
			//System.out.println(objName.isDisplayed());
			//System.out.println("Hello");
			(new WebDriverWait(driver,timeinseconds)).until(ExpectedConditions.elementToBeClickable(objName));
			if(verifyElementDisplayed(objNameStr, objName, testId)){
				objName.click();
				ExtentReport.reportPass(objNameStr + " is clicked");
			}
			else{
	            ExtentReport.reportFail(" Could not click on object ' "+objName.getText()+" '   Failure ScreenShot ", driver , "Click_Element",testId);			
			}
		} catch (Exception e) {			
			ExtentReport.reportFail(objNameStr + " is not clicked " + e);
			clickJavaScript(objNameStr, objName, testId);
		}
	}

	public static void clickJavaScript(String objNameStr, WebElement objName, String testId) throws IOException {
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		try {
			scrollintoview(objName);		
			if (objName.isDisplayed()){
				executor.executeScript("arguments[0].click();", objName);
			}
			else{
				scrollintoview(objName);
	            ExtentReport.reportFail(" Could not click on object  ' "+objName.getText()+" '  Failure ScreenShot  ", driver , "ClickJavaScript_Element",testId);	
			}
		} catch (Exception ex) {
			  ExtentReport.reportFail(" Could not click on object "+objName.getText());		
		}
	}



	public static void scrollintoview(WebElement e) {
		try {
			((JavascriptExecutor) driver).executeScript(
					"arguments[0].scrollIntoView(true);", e);
			//System.out.println("scrolled");
		} catch (Exception ex) {
			Assert.assertFalse(true,
					"Failed in Scroll to View: " + e.toString());
		}
	}

	public static void scrollBy(int pixelValue) {
		try {
			((JavascriptExecutor) driver).executeScript("scroll(0, "+pixelValue+");");
			System.out.println("scrolled scrollBy");
		} catch (Exception ex) {
			//Assert.assertFalse(true,
			//"Failed in Scroll to View: " + e.toString());
		}
	}


	public static void enterValue(String objNameStr, WebElement objName, String valueToEnter, String testId) throws IOException, InterruptedException{
		try {
			int timeinseconds = 30;
			scrollintoview(objName);
			(new WebDriverWait(driver,timeinseconds)).until(ExpectedConditions.elementToBeClickable(objName));
			objName.clear();
			objName.sendKeys(valueToEnter);
			
			//driver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);
			ExtentReport.reportPass("Entering value '" + valueToEnter + "' in '" + objNameStr + " is successfull");
		} catch (Exception e) {
            ExtentReport.reportFail(" Could not enter value in   ' "+ objNameStr + " '  Failure ScreenShot ", driver , "EnterValue",testId);
			}
	}
	
	public void enterValue(String objNameStr, WebElement objName, String valueToEnter){
		try {
			 if (!valueToEnter.isEmpty()){
				 int timeinseconds = waitTIme;
				(new WebDriverWait(driver,timeinseconds)).until(ExpectedConditions.elementToBeClickable(objName));
				objName.clear();
				objName.sendKeys(valueToEnter);
				ExtentReport.reportPass("Entering value '" + valueToEnter + "' in '" + objNameStr + " is successfull");
			 }
		} catch (Exception e) {
			
			ExtentReport.reportFail("Entering value '" + valueToEnter + "' in '" + objNameStr + " Failed" + e);
		}
		
	}

	public static void enterValueByJavaScript(String objNameStr, WebElement objName, String valueToEnter, String testId) throws IOException, InterruptedException{
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		try {
			scrollintoview(objName);
			executor.executeScript("arguments[0].value='" + valueToEnter + "';", objName);
		} catch (Exception ex) {
			scrollintoview(objName);
            ExtentReport.reportFail(" Could not enter value in  '  "+ objNameStr + " ' Failure ScreenShot ", driver , "EnterValueByJavaScript",testId);
		}
	}
	

	public static void RemoveAttributeByJavaScript(String objNameStr, WebElement objName, String valueToEnter, String testId) throws IOException, InterruptedException{
		JavascriptExecutor executor = (JavascriptExecutor) driver;
		try {
			System.out.println("Entered Remove Attribute");
			scrollintoview(objName);
			executor.executeScript("arguments[0].removeAttribute('readonly',0)",objName);
		} catch (Exception ex) {
			scrollintoview(objName);
            ExtentReport.reportFail(" Could not enter value in  '  "+ objNameStr + " ' Failure ScreenShot ", driver , "EnterValueByJavaScript",testId);
		}
	}
	

	public static void selectFormDropDownList(String objNameStr, WebElement objName, String valueToSelect){
		try{
			Thread.sleep(2000);
			Select dropDown = new Select(objName);
			
			String selected = dropDown.getFirstSelectedOption().getText();
			if(!selected.equalsIgnoreCase(valueToSelect)) {//do stuff already selected}
				List<WebElement> Options = dropDown.getOptions();
				for(WebElement option:Options){	
					System.out.println("Value : "+valueToSelect + "length : " + valueToSelect.length());
					System.out.println("Option : "+option.getText() + "length : " + option.getText().length());
					System.out.println(option.getText().equalsIgnoreCase(valueToSelect));
					if(option.getText().equalsIgnoreCase(valueToSelect)){
						System.out.println("Option Selected -> " + option.getText());
						option.click();
						break;
					}else if(option.getText()==(valueToSelect)){
						System.out.println("Equal Option Selected -> " + option.getText());
						option.click();				
					}
						ExtentReport.reportFail("Selecting Value '" + valueToSelect + "' from dropdown list '" + objNameStr + "' Failed");
					
				}
			}
			ExtentReport.reportPass("Selecting Value '" + valueToSelect + "' from dropdown list '" + objNameStr + "' is successful");
		}catch (Exception e){
			ExtentReport.reportFail("Selecting Value '" + valueToSelect + "' from dropdown list '" + objNameStr + "' Failed" + e);
		}
	}

	public void selectFormDropDownListByIndex(String objNameStr, WebElement objName, int valueToSelect){
		try{
			Select dropDown = new Select(objName);
			dropDown.deselectAll();
			dropDown.selectByIndex(valueToSelect);
			ExtentReport.reportPass("Selecting Value '" + valueToSelect + "' from dropdown list '" + objNameStr + "' is successful");
		}catch (Exception e){
			ExtentReport.reportFail("Selecting Value '" + valueToSelect + "' from dropdown list '" + objNameStr + "' Failed" + e);
		}
	}

	public static void setCheckBox(String objNameStr, WebElement objName, String option){
		try{scrollintoview(objName);
		if(option.trim().equalsIgnoreCase("ON")){
			if(!objName.isSelected()){
				objName.click();
			}
		}else{
			if(objName.isSelected()){
				objName.click();
			}
		}
		ExtentReport.reportPass("Setting Value '" + option + "' in checkbox '" + objNameStr + "' is successful");
		}catch(Exception e){
			ExtentReport.reportFail("Setting Value '" + option + "' in checkbox '" + objNameStr + "' Failed" + e);
		}
	}

	public void switchWindow(String windowOption){
		String parentWindow = driver.getWindowHandle();
		Set<String> handles =  driver.getWindowHandles();
		System.out.println("Parent URL -> " + driver.getCurrentUrl());
		for(String windowHandle  : handles){
			if(windowOption.equalsIgnoreCase("Child")){
				if(!windowHandle.equals(parentWindow)){
					driver.switchTo().window(windowHandle);
					System.out.println("Child URL -> " + driver.getCurrentUrl());
					break;
				}
			}else if(windowOption.equalsIgnoreCase("Parent")){
				driver.switchTo().window(parentWindow); //cntrl to parent window				
			}
		}
	}

	public static void switchFrame(String frameNameStr, WebElement frameName){
		try{
			if(frameNameStr.equalsIgnoreCase("Default")){
				driver.switchTo().defaultContent();
			}else if(frameNameStr.equalsIgnoreCase("Content Frame")){
				driver.switchTo().frame(frameName);
			}
		}catch(Exception e){

		}
	}

	public void rightClickAndSelectOption(String objNameStr, WebElement objName, String optionToClick, String testId){

		try{
			Actions oAction = new Actions(driver);
			oAction.moveToElement(objName);
			oAction.contextClick(objName).build().perform();
			Thread.sleep(2000);
			WebElement element = driver.findElement(By.linkText(optionToClick));
			Thread.sleep(2000);
			click(optionToClick, element, testId);
			System.out.println("Clicked on option "+ optionToClick);
		}catch(Exception e){
		}
	}

	public String getURL(){
		return driver.getCurrentUrl();
	}

	public void refreshBroswer(WebDriver driver) {
		try{
			driver.navigate().refresh();
			Thread.sleep(2000);
		}catch(Exception e){
			System.out.println("Refresh Failed -> " + e);
		}
	}

	public String getPageName(String URL){
		String str = URL.trim();
		String[] str1 = str.split("/");
		System.out.println(str1[(str1.length-1)]);
		String pageName1 = str1[(str1.length-1)];
		String[] str2 = pageName1.split(".html");
		return str2[0];
	}

	public void NavigateBack() throws IOException{
		driver.navigate().back();
		//driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
	}

	public void NavigateToURL(String URL){
		try{
			driver.navigate().to(URL.trim());
			Runtime.getRuntime().exec("C:\\PRU_CMS\\SVN\\Prudential.co.uk_Automation_Suite\\autoit\\popup.exe");
		}catch(Exception e){
			ExtentReport.reportFail("Navigate to URL" + URL + "' Failed" + e);
		}
	}

	public String getElementURL(WebElement element){
		String elementURL= element.getAttribute("href");
		System.out.println("Element URL -- "+ elementURL);
		return(elementURL);		
	}

	public String getElementTitle(WebElement element){
		String elementTitle= element.getText();
		System.out.println("Element Title -- "+ elementTitle);
		return(elementTitle);		
	}

	public void verifyTextOfElement(String objNameStr, WebElement objName, String textToVerify, String testId){
		try{
			String expectedText = textToVerify.trim();
			String actualText = objName.getText();
			ExtentReport.reportInfo("Actual Text : " + actualText);
			ExtentReport.reportInfo("Expected Text : " + expectedText);		
			if(actualText.equals(expectedText)){
				ExtentReport.reportPass("Text Verification for ' " + objNameStr + " ' is Successful");
			} else {
				scrollintoview(objName);
	            ExtentReport.reportFail("  Failed to verify Text of "+objNameStr + "  Failure ScreenShot ", driver , "VerifyTextOfElement",testId);
			}
		}catch(Exception e){
			ExtentReport.reportFail("Verify Text of Element '" + objNameStr + "' Failed" + e);
		}
	}

	public void verifyContainsText(String objNameStr, WebElement objName, String textToVerify, String testId){
		try{
			String expectedText = textToVerify.trim();
			String actualText = objName.getText();		
			ExtentReport.reportInfo("Actual Text : " + actualText);
			ExtentReport.reportInfo("Expected Text : " + expectedText);			
			if(actualText.contains(expectedText)){
				ExtentReport.reportPass("Text Verification for ' " + objNameStr + "'  is Successful");
			}
			else {
				scrollintoview(objName);
	            ExtentReport.reportFail(" Failed to verify Text of "+objNameStr + "  Failure ScreenShot ", driver , "VerifyContainsText",testId);
			}
		}catch(Exception e){
			ExtentReport.reportFail("Verify Text of Element '" + objNameStr + "' Failed" + e);
		}
	}

	public void verifyElementPresent(String objNameStr,String eleLocation, String testId) throws IOException, InterruptedException{
		try{
			WebElement objName = driver.findElement(By.cssSelector(eleLocation));
			if(objName.isDisplayed()){
			ExtentReport.reportPass("' "+ objName + " ' is displayed. Element name is --> ' "+objName.getText()+ " ' ");
			} else {
	            ExtentReport.reportFail("Element   '"+ objName.getText() + "'    doesn't exist. Failure ScreenShot ", driver , "VerifyElementPresent",testId);
			}
		}catch(Exception e){			
			ExtentReport.reportFail(" Element "+ objNameStr + " doesn't exist ", driver , "VerifyElementPresent",testId);
		}
	}

	public WebElement createCssWebElement(String eleLocation){
		WebElement newElement =  driver.findElementByCssSelector(eleLocation);
		return(newElement);
	}

	public static void currentexecutionlog(String data) throws InterruptedException{
		Currentlogservice.submit(new ConcurrentUpdates("",data.trim(),"CurrentExecutionLog"));
		Currentlogservice.awaitTermination(2, TimeUnit.SECONDS);
	}

	public static void updateObjectsdata(LinkedHashMap<String, String>  ObjProperties) throws InterruptedException{
		ObjectsData.submit(new ConcurrentUpdates(ObjProperties));
		ObjectsData.awaitTermination(1, TimeUnit.SECONDS);
	}


}

