package com.pru.utilities;

import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindAll;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;




public class CommonFunction extends TestBase {
	
	@FindAll({@FindBy(className="ui-messages-error-summary")})
	private static List<WebElement> error;
	@FindAll({@FindBy(xpath="/html/body/div[1]/div[1]/div/div[3]/div[2]/form/span")})
	private static List<WebElement> loginPageError;
	@FindAll({@FindBy(xpath="/kaedwen/debug.seam")})
	private static List<WebElement> jBossError;	
	@FindAll({@FindBy(className="ui-messages-warn-summary")})
	private static List<WebElement> warningMsg;	
	
    static String[] strDays = new String[] { "Sunday", "Monday", "Tuesday", "Wednesday", "Thrusday",
        "Friday", "Saturday" };
	
	public static boolean waitTillObjectNotExist(WebElement element,String testId) throws IOException, InterruptedException {
		// TODO Auto-generated method stub
		//System.out.println("message : " + element.getSize());
		Boolean blnExist=true;
		try{
			WebDriverWait wait = new WebDriverWait(driver , 100);
			wait.until(ExpectedConditions.visibilityOf(element));
			final int Max_Wait = 5;
			int retries = 0;
			while (!wait.until(ExpectedConditions.visibilityOf(element)).isDisplayed()) {
				wait.until(ExpectedConditions.visibilityOf(element));
				if (retries < Max_Wait) {
					retries++;
					continue;
				} else{
					blnExist = false;
					ExtentReport.reportFail(" Could not click on object ' "+element.getText()+" '   Failure ScreenShot ", driver , "waitTillObjectExist",testId);							
				}
										
			}		
		}catch(Exception e){
			ExtentReport.reportFail(" Object not exist :  "+ element +"    Failure ScreenShot ", driver , "waitTillObjectExist",testId);
		}

		return blnExist;
	}
	
    public static boolean isAvailableObject(WebElement selector,int timeinseconds) throws InterruptedException{
        Boolean blnavailable=false;
        
        try{
             //if(timeinseconds==0) timeinseconds = waitTIme;
        	 WebDriverWait wait = new WebDriverWait(driver , timeinseconds);
        	 //System.out.println("timeinseconds : " + timeinseconds);
        	 wait.until(ExpectedConditions.visibilityOf(selector));
        	 //System.out.println("timeinseconds : " + timeinseconds);
            // (new WebDriverWait(driver,timeinseconds)).until(ExpectedConditions.visibilityOf(selector));             
              blnavailable =true;
        }catch(Exception e){
               blnavailable = false;
        }
 //     System.out.println("blnavailable "+blnavailable );
        
        return blnavailable;           
 }


	public static void waitTillObjectExist(WebElement element1, String testId) throws InterruptedException, IOException {
		WebDriverWait wait = new WebDriverWait(driver , ConfigProperties.explicitwait);
		final int Max_Wait = 10;
		int retries = 0;
		while (true) {
			try {
				wait.until(ExpectedConditions.visibilityOf(element1));
				return;
			} catch (StaleElementReferenceException e) {
				if (retries < Max_Wait) {
					retries++;
					continue;
				} else
					ExtentReport.reportFail(" Could not click on object ' "+element1.getText()+" '   Failure ScreenShot ", driver , "waitTillObjectExist",testId);	
			}
		}
	}
	
	public static void waitTillObjectExistByIndex(WebElement selector, int index) {
		// Explicit Wait
		WebDriverWait wait = new WebDriverWait(driver , ConfigProperties.explicitwait);
		int Max_Wait = 50;
		int count = 0;
		boolean flag ;
		try {
			do{
				String XpathSelector = GetSelectorAsString(selector);
				//System.out.println(XpathSelector);
				WebElement element = driver.findElements(By.cssSelector(XpathSelector)).get(index);
				wait.until(ExpectedConditions.visibilityOf(element));
				flag = element.isEnabled();
				count ++;
				//System.out.println("flag : " + flag +"  count : " + count );
			}while((!flag) &&  count < Max_Wait );
		} catch (StaleElementReferenceException e) {
			System.out.println(e);
			throw e;		
		}
	}
	

//	
//	public static void waitTillObjectExistByIndex(WebElement selector, int index) throws IOException, InterruptedException {
//		// Explicit Wait
//		try {
//			 int timeinseconds = waitTIme;
//			(new WebDriverWait(driver,timeinseconds)).until(ExpectedConditions.visibilityOf(selector));
//
//		} catch (Exception e) {
//			System.out.println(e);
//			System.out.println("Object doesnt exists :  index : "  + index);
//			ExtentReport.reportFail("Could not click on object ' "+selector.getText(), driver ," "," ");
//			//throw e;		
//		}
//	}
//	
	
	public static void waitUntillObjectNotExistByIndex(WebElement Selector, int intActualCount) throws Exception {
		// TODO Auto-generated method stub
		int count = 0;
		int noofelement;
		do {		
			String CssSelector = GetSelectorAsString(Selector);
			List<WebElement> element = driver.findElements(By.cssSelector(CssSelector));
			noofelement = element.size();
			if(noofelement <= intActualCount)
				Thread.sleep(1000);
		}while((noofelement <= intActualCount) && count++ < 100);
		//System.out.println("intActualCount : " + intActualCount + "count : " + count);
		if(noofelement <= intActualCount)
			throw new Exception ("Unable to add new element in " + intActualCount + " table");
	}	
	
	public static String errorMessage(){
		List<WebElement> liElements = error;
		//System.out.println("error in the scren "+ liElements);
		String errorText ="";
		for (WebElement element: liElements) {
			if(!element.getText().equals("")){
				if(errorText.equals(""))
					errorText = element.getText();
				else 
					errorText = errorText + " , "+ element.getText();
			}
		    //System.out.println("error message on screen: "+ element.getText());
		}
		return errorText;	
	}	
	
	public static String loginPageErrorMessage(){
		List<WebElement> liElements = loginPageError;
		String errorText = null;
		if(liElements!=null){		
			for (WebElement element: liElements) {
				if(!element.getText().equals(null)){
					//System.out.println("error in the screen "+ liElements);
					if(errorText.equals(""))
						errorText = element.getText();
					else 
						errorText = errorText + " , "+ element.getText();
				}
			    System.out.println("Error Msg on Screen : "+ element.getText());
			}		
		}
		return errorText;	
	}
	public static String jBossError(){
		List<WebElement> liElements = jBossError;
		//System.out.println("error in the screen "+ liElements);
		String errorText ="";
		for (WebElement element: liElements) {
			if(!element.getText().equals("")){
				if(errorText.equals(""))
					errorText = element.getText();
				else 
					errorText = errorText + " , "+ element.getText();
			}
		    System.out.println("error message on screen: "+ element.getText());
		}
		return errorText;	
	}
	public static String warningMessage(){
		List<WebElement> liElements = warningMsg;
		//System.out.println("warning in the scren "+ liElements);
		String errorText ="";
		for (WebElement element: liElements) {
			if(!element.getText().equals("")){
				if(errorText.equals(""))
					errorText = element.getText();
				else 
					errorText = errorText + " , "+ element.getText();
			}
		    System.out.println("warning message on screen: "+ element.getText());
		}
		return errorText;	
	}

	public static void SelectValueByIndex(WebElement Selector, String InputValue,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			if(!InputValue.trim().isEmpty() && InputValue != null){
				String CssSelector = GetSelectorAsString(Selector);
				System.out.println("Index value for field :" + FieldName + "index :" + index);
				ExtentReport.reportInfo("Index value for field :" + FieldName + "index :" + index);
				//System.out.println(CssSelector);
				//WebElement element = driver.findElements(By.xpath(XpathSelector)).get(index);
				//System.out.println("Size : " + driver.findElements(By.cssSelector(CssSelector)).size() + " index : " +index);
				//waitTillObjectExistByIndex(Selector,index);
				WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);
				System.out.println("Field : " + FieldName + "is enabled status is : " + element.isEnabled());
				ExtentReport.reportInfo("Field : " + FieldName + "is enabled status is : " + element.isEnabled());
				//System.out.println("Element : "+ element.getSize());
				selectValueFormList(FieldName, element , InputValue, testId);			
				ExtentReport.reportInfo("Selected value as "+ InputValue + " on " + FieldName);		
				}else
					ExtentReport.reportFail(" Value is blank for  : " + FieldName +" '   Failure ScreenShot ", driver , "Method: SelectTextByIndex",testId);
			} catch (Exception e){
				ExtentReport.reportFail(" Unable to select value : " + InputValue + " from "
					+ FieldName +" '   Failure ScreenShot " + e, driver , "Method: SelectTextByIndex",testId);	
			}
			
		}
	
	public static void SelectValueByIndexXPATH(WebElement Selector, String InputValue,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			if(!InputValue.trim().isEmpty()){
				String XpathSelector = GetSelectorAsString(Selector);
				//System.out.println(XpathSelector);
				//WebElement element = driver.findElements(By.xpath(XpathSelector)).get(index);
				try{
					WebElement element = driver.findElements(By.cssSelector(XpathSelector)).get(index);
					//WebElement element = driver.findElements(By.xpath("//select[contains(@id,'payer')]")).get(index);
					//System.out.println("Element : "+ element.getText());
					selectValueFormList(FieldName, element , InputValue,testId);
				}catch(Exception e){
					System.out.println("Fail");
				}
				
				//selectFormDropDownList(FieldName, element , InputValue);
				
				ExtentReport.reportInfo("Selected value as "+ InputValue + " on " + FieldName);			
			}
		} catch (Exception e){	
			ExtentReport.reportFail(" Unable to select value : " + InputValue + " from "
					+ FieldName +" '   Failure ScreenShot ", driver , "Method: SelectTextByIndex",testId);			
		}
	}
	
	
	public static void selectValueFormList(String FieldName, WebElement objName, String valueToSelect,String testId) throws InterruptedException, IOException{
		try{
			Select dropDown = new Select(objName);	
			boolean flag = false;
			List<WebElement> Options = dropDown.getOptions();
			//System.out.println("Options : " + Options.size());
			for(WebElement option:Options){	
				//System.out.println("Value : "+valueToSelect + "  length : " + valueToSelect.length());
				//System.out.println("Option : "+option.getText() + "  length : " + option.getText().length());
				//System.out.println(valueToSelect.equalsIgnoreCase(option.getText()));
				if(valueToSelect.equalsIgnoreCase(option.getText())){
					//System.out.println("Option Selected -> " + option.getText());
					option.click();
					flag = true;
					break;
				}	
			}
			if(!flag)
				throw new Exception ("Unable to select value : " + valueToSelect + " from "	+ FieldName + ". Method: selectValueFormList");
			else
				ExtentReport.reportPass("Selecting Value '" + valueToSelect + "' from dropdown list '" + FieldName + "' is successful");
		}catch (Exception e){
			ExtentReport.reportFail(" Unable to select value : " + valueToSelect + " from dropdown list"
					+ FieldName +" '   Failure ScreenShot ", driver , "Method: selectValueFormList",testId);

		}
	}


	private static String GetSelectorAsString(WebElement Selector) {
		// TODO Auto-generated method stub
		String str = Selector.toString();		
		String[] str1 = str.split(": ");
		//str = '"'+str1[2]+'"';
		//System.out.println("str1[2] : " + str1[2]);
		str = str1[2].substring(0, str1[2].length()-1);
		//System.out.println("str : " + str);
		//System.out.println(str.substring(0, str.length()));
		return str;
		
	}
	
	public static void ClickOnButtonByIndex(WebElement cssPath,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			//System.out.println("ClickOnButtonByIndex");
			String CssPathSelector = GetSelectorAsString(cssPath);
			//System.out.println("CssPathSelector : " + CssPathSelector);
			//new WebDriverWait(driver,Max_Wait).until(ExpectedConditions.visibilityOf(cssPath));
			WebElement element = driver.findElements(By.cssSelector(CssPathSelector)).get(index);	
			//System.out.println("element"+ element.getText() );
			scrollintoview(element);
			element.click();
			Thread.sleep(1000);
		} catch (Exception e){	
			ExtentReport.reportFail(" Unable to click on Button : " + FieldName +" '   Failure ScreenShot ", driver , "Method: ClickOnButtonByIndex",testId);			
		}
	}

	public static void CheckValueByIndex(WebElement selector,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			String CssSelector = GetSelectorAsString(selector);
			WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);	
			//System.out.println("element"+ element );	
			element.click();
			Thread.sleep(1000);
		} catch (Exception e){
			ExtentReport.reportFail(" Unable to click on value : " + FieldName +" '   Failure ScreenShot ", driver , "Method: CheckValueByIndex",testId);			
		}
	}
	
	public static void CheckValueByIndexXpath(WebElement selector,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			String CssSelector = GetSelectorAsString(selector);
			List<WebElement> list = driver.findElements(By.cssSelector(CssSelector));
			//System.out.println("CssSelector : " + CssSelector + "  Size : " + list.size());
			ExtentReport.reportInfo("Total elements size for field :" + FieldName + " is " + list.size());
			WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(list.size()-1);	
			//System.out.println("element"+ element );	
			element.click();
			Thread.sleep(1000);
		} catch (Exception e){	
			ExtentReport.reportFail(" Unable to click on value : " + FieldName +" '   Failure ScreenShot ", driver , "Method: CheckValueByIndex",testId);
			ExtentReport.reportFail("Unable to click on Webelement with Feild name as : " + FieldName + e);
		}
	}
	
	public static int GetLocatorCount(WebElement selector, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		int intCount = 0;
		try{
			String CssSelector = GetSelectorAsString(selector);
			List<WebElement> list = driver.findElements(By.cssSelector(CssSelector));
			//System.out.println("CssSelector : " + CssSelector + "  Size : " + list.size());
			intCount = list.size();					
		} catch (Exception e){	
			ExtentReport.reportFail(" Unable to cget locator count  : " +" '   Failure ScreenShot ", driver , "Method: GetLocatorCount",testId);			
		}
		return intCount;	
	}
	
	public static void CheckBoxValueClick(WebElement XpathValue,
			String FieldName, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			String XpathSelector = GetSelectorAsString(XpathValue);
			//System.out.println("XpathSelector : " + XpathSelector);
			WebElement element = driver.findElement(By.xpath(XpathSelector));	
			//System.out.println("element"+ element );	
			element.click();
			Thread.sleep(1000);
		} catch (Exception e){	
			ExtentReport.reportFail(" Unable to click on check box value  : "+ FieldName  +" '   Failure ScreenShot ", driver , "Method: CheckValueByIndex",testId);			
		}
	}
	
	public static void EnterValueByIndex(WebElement Selector,String InputValue,
			String FieldName, int index, String testId)throws Exception {
		try {
			//System.out.println("Value : "+ InputValue);
			//System.out.println("xpath : " + Selector);
			if(!InputValue.trim().isEmpty()) {				
				String CssSelector = GetSelectorAsString(Selector);
				System.out.println("CssSelector : " + CssSelector);
				System.out.println("index : " + index);
				//System.out.println(driver.findElements(By.cssSelector(CssSelector)).size());
				//System.out.println( driver.findElements(By.cssSelector(CssSelector)).get(index).getText());
				//waitTillObjectExistByIndex(Selector,index);
				WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);
				System.out.println(element.getText());
				if (!element.isDisplayed())
					ExtentReport.reportFail(element.toString() + " not dispayed !!" +" '   Failure ScreenShot ", driver , "Method: enterValueByIndex",testId);
				else{
					scrollintoview(element);
					element.clear();
					element.sendKeys(InputValue);
					Thread.sleep(1000);
					//element.sendKeys(Keys.chord(Keys.CONTROL, "a"),InputValue);
					ExtentReport.reportPass("Entered value as "+ InputValue + " on " + FieldName);
				}
					
			}
		} catch (Exception e) {
			//ScreenShot(driver);
			ExtentReport.reportFail("Unable to set value value on : " + FieldName +" '   Failure ScreenShot ", driver , "Method: EnterValueByIndexXPATH",testId);			
		}
	}
	
	public static void EnterPaymentDateValueByAction(WebElement Selector,String InputValue,
			String FieldName, int index, String testId)throws Exception {
		try {
			
		int compare = 1;
			if(!InputValue.trim().isEmpty()) {
				String XpathSelector = GetSelectorAsString(Selector);
				WebElement element = driver.findElements(By.cssSelector(XpathSelector)).get(index);
				System.out.println(element.getSize());
				if (!element.isDisplayed())
					ExtentReport.reportFail(element.toString() + " not dispayed !!" +" '   Failure ScreenShot ", driver , "Method: EnterValueByIndexXPATH",testId);
				else{								
					RemoveAttributeByJavaScript(FieldName, element, InputValue, "");
					enterValueByJavaScript(FieldName,element,InputValue,testId);
					//element.clear();					
//						for(int i=0;i<3;i++)
//						{
//							System.out.println("Timer i =  " + i + FieldName );
//							ExtentReport.reportInfo("Timer i =  " + i + FieldName);
//							
//							enterValueByJavaScript(FieldName,element,InputValue,testId);
//							
//							//element.sendKeys(InputValue); //Enter date in required format	
//							Thread.sleep(2000);							
//								compare = String.valueOf(element.getAttribute("value")).compareToIgnoreCase(InputValue);
//								Thread.sleep(1000);
//								System.out.println("Compare :" + compare);
//								System.out.println("Compare App date :" + element.getAttribute("value"));
//								if(compare == 0) 
//										{
//											break;									
//										}	
//								Thread.sleep(2000);
//						}					
					}
				}
		} catch (Exception e) {
			//ScreenShot(driver);
			ExtentReport.reportFail("Unable to set value value on : " + FieldName +" '   Failure ScreenShot ", driver , "Method: enterValueByIndex",testId);		
		}
	}
	
		
	public static void EnterValueByActions(WebElement Selector,String InputValue,
			String FieldName, int index, String testId) throws InterruptedException, IOException	{
		try{
			boolean isFilled = false;
			int comp = 1;
			Actions actionList = new Actions(driver);
			//System.out.println("EnterValueByActions");
			String XpathSelector = GetSelectorAsString(Selector);
			System.out.println("XpathSelector : " + XpathSelector +" index : " + index);
			
			// Added by Kaivalya on 13/11/2017
			//waitTillObjectExistByIndex(Selector,index);
			
			List<WebElement> ele = driver.findElements(By.cssSelector(XpathSelector));		
			System.out.println("Size of Field : " + FieldName + " is :" + ele.size());
			//System.out.println("value of first element of : " + FieldName + "is :" + ele.get(0).getAttribute("value"));		
			WebElement element = driver.findElements(By.cssSelector(XpathSelector)).get(index);
			System.out.println("deleted1 : " + element.getSize());
			scrollintoview(element);
			
			for(int i=0;i<3;i++)
			{			
					actionList.moveToElement(element);
					Thread.sleep(2000);
					element.sendKeys(Keys.CONTROL + "a");
					element.sendKeys(Keys.DELETE);
					//element.clear();					
					actionList.clickAndHold(element).sendKeys(InputValue).
					release().build().perform();
					System.out.println("----Place value in : " + FieldName);
					Thread.sleep(1000);
					
					System.out.println("Timer i =  " + i + FieldName + ":" + element.getAttribute("value"));
					ExtentReport.reportInfo("Timer i =  " + i + FieldName + ":" + element.getAttribute("value"));
					
					actionList.moveToElement(element);
					
					String actual = String.valueOf(element.getAttribute("value"));
					
					System.out.println("Timer i = " + i + "actual : " + actual + "and expecrted : " +  InputValue);
					
					comp = actual.compareToIgnoreCase(InputValue) ;
				
				if(comp == 0)
				{
					System.out.println("inside compare");
					break;
				}
											
//				if(actual.equalsIgnoreCase(InputValue))
//				{
//					isFilled = true;
//				}				
				
				Thread.sleep(2000);
			}			
//			RemoveAttributeByJavaScript(FieldName, element, InputValue, "");					
//			
//			element.clear();
//			element.sendKeys(InputValue); //Enter date in required format
			
			
		} catch (Exception e) {
			//ScreenShot(driver);
			System.out.println("----Couldnt place value in : " + FieldName );
			ExtentReport.reportFail("Unable to set value value on : " + e + FieldName +" '   Failure ScreenShot ", driver , "Method: EnterValueByActions",testId);						
		}


	}	
	
	
	public static void verifyTableRowCount(WebElement tablerowcount, int intActualRowCount, String testId) throws Exception {
		// TODO Auto-generated method stub
		int count = 0;
		int rowCount;
		do {
			Thread.sleep(1000);
			rowCount = CommonFunction.getTableRowCount(tablerowcount);
			//System.out.println("rowCount : " + rowCount);
			count ++;
		}while((rowCount <= intActualRowCount) && count < 50);
		System.out.println("rowCount : " + rowCount + "intActualRowCount : " + intActualRowCount + "count : " + count);
		if(rowCount <= intActualRowCount)
			ExtentReport.reportFail("Unable to add new row in " + tablerowcount +" '   Failure ScreenShot ", driver , "Method: WaitUntilClickable",testId);
	}
	

	public static int getTableRowCount(WebElement XpathValue) {
		// TODO Auto-generated method stub
		String XpathSelector = GetSelectorAsString(XpathValue);
		int rowCount = driver.findElements(By.xpath(XpathSelector)).size();		
		return rowCount;
		
	}

	public static String GetSystemDateFromApplication(WebElement systemdate) {
		// TODO Auto-generated method stub
		String XpathSysDateSelector = GetSelectorAsString(systemdate);
		WebElement element = driver.findElement(By.xpath(XpathSysDateSelector));
		XpathSysDateSelector = element.getText();
		XpathSysDateSelector = XpathSysDateSelector.substring(XpathSysDateSelector.indexOf(",")+2, XpathSysDateSelector.lastIndexOf(":")-5);
		System.out.println("date : " +XpathSysDateSelector);
		return XpathSysDateSelector;
	}

	public static String GetAddedBusinessDate(WebElement sonataappdate,int days) {
		// TODO Auto-generated method stub
		int count = 1;

		String dtSystemDate = GetSystemDateFromApplication(sonataappdate);
		System.out.println("dtSystemDate :" +dtSystemDate);
		SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
		@SuppressWarnings("deprecation")
		Date date=new Date(dtSystemDate);
	    Calendar calendar = Calendar.getInstance();
	    calendar.setTime(date); 
	    
	    for(int i=0;i<20;i++) {
	        if(count > days+1)   	break;
	    	calendar.add(Calendar.DATE, 1);	    	 
	    	date = calendar.getTime();
	    	//System.out.println(date);	    	
	    	 if(!(strDays[calendar.get(Calendar.DAY_OF_WEEK)-1].equalsIgnoreCase("Saturday")) && !(strDays[calendar.get(Calendar.DAY_OF_WEEK)-1].equalsIgnoreCase("Sunday"))){	    		 
	    		 count++;
	    		// System.out.println("Date : " +date);
		    	 //System.out.println("Inside : " + strDays[calendar.get(Calendar.DAY_OF_WEEK)-1]);
		    	 //System.out.println("Inside : " + (calendar.get(Calendar.DAY_OF_WEEK)-1));
	    	 }	    	
	    }
	    
	    //System.out.println("Before:" + dateformat.format(date));
	    //System.out.println(strDays[calendar.get(Calendar.DAY_OF_WEEK)-1]);
		return dateformat.format(date);
	}
	
	public static String CheckBusinessDate(String strSystemDate) throws ParseException {
		// TODO Auto-generated method stub
		SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
		System.out.println("strSystemDate "+ strSystemDate);
		//@SuppressWarnings("deprecation")
		Date startDate = dateformat.parse(strSystemDate);
		//Date date=new Date(strSystemDate);
		System.out.println("Before1:" + dateformat.format(startDate));
	    Calendar calendar = Calendar.getInstance();
	    System.out.println("Before1:" + dateformat.format(startDate));
	    calendar.setTime(startDate); 
	    System.out.println("Before2:" + dateformat.format(startDate));
	    if(calendar.get(Calendar.DATE) > 26)
	    	calendar.add(Calendar.DATE, 5);	 
	    startDate = calendar.getTime();
	    
	    System.out.println("Before:" + dateformat.format(startDate));
	    //System.out.println(strDays[calendar.get(Calendar.DAY_OF_WEEK)-1]);
		return dateformat.format(startDate);
	}
	private static String GetAddedYear(WebElement sonataappdate,int count) {
		
		String dtSystemDate = GetSystemDateFromApplication(sonataappdate);
		SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
		@SuppressWarnings("deprecation")
		Date date=new Date(dtSystemDate);
	    Calendar calendar = Calendar.getInstance();
	    calendar.setTime(date); 
	    calendar.add(Calendar.YEAR, count); 
	    date = calendar.getTime();
	   // System.out.println("Before:" + dateformat.format(date));
	    //System.out.println(strDays[calendar.get(Calendar.DAY_OF_WEEK)-1]);
		return dateformat.format(date);
	}

	public static void WaitUntilClickable(String objName, WebElement XpathValue, String testId ) throws Exception {
		// TODO Auto-generated method stub
		WebDriverWait myWaitVar = new WebDriverWait(driver,10);
		try{
			String XpathSelector = GetSelectorAsString(XpathValue);
			myWaitVar.until(ExpectedConditions.elementToBeClickable (By.id(XpathSelector)));
			ExtentReport.reportPass(objName + " is now clickable");		
		}catch (Exception e) {
			//ScreenShot(driver);
			ExtentReport.reportFail("Unable to click on : " + objName +" '   Failure ScreenShot ", driver , "Method: WaitUntilClickable",testId);
		}


	}

	public static void SelectAccountTypeValueByIndex(WebElement Selector, String InputValue,
			String FieldName, int index, String testId) throws InterruptedException, Exception {
		// TODO Auto-generated method stub
		try{
			if(!InputValue.trim().isEmpty()){
				String CssSelector = GetSelectorAsString(Selector);
				//System.out.println(CssSelector);
				try{
					WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);
					Select select = new Select(element);
					List<WebElement> oSize = select.getOptions();
					//System.out.println("size : " + oSize.size());
					for(int i =0; i < oSize.size() ; i++){
						String sValue = select.getOptions().get(i).getText();
						//System.out.println("sValue : " + sValue);
						//System.out.println("InputValue : " + InputValue);
						if(sValue.contains(InputValue)){
							//System.out.println("Inside sValue : " + sValue);
							select.selectByVisibleText(sValue);
							//select.selectByIndex(i);
							break;
							}
						}
				}catch(Exception e){
					System.out.println("Fail");
				}				
				ExtentReport.reportInfo("Selected value as "+ InputValue + " on " + FieldName);			
			}
		} catch (Exception e){	
			ExtentReport.reportFail("Unable to select value : " + InputValue + " from "
					+ FieldName +" '   Failure ScreenShot ", driver , "Method: SelectTextByIndex",testId);
			//ExtentReport.reportFail("Unable to select value : " + InputValue + " from "+ FieldName + ". Method: SelectTextByIndex");	
		}
	}

	public static void clickByIndex(String objNameStr,WebElement Selector, int index, String testId) throws InterruptedException, IOException {
		try {
			String CssSelector = GetSelectorAsString(Selector);
			//System.out.println(CssSelector);
			WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);
			if(verifyElementDisplayed(objNameStr, element, testId)){
				//System.out.println(element + " : " + objNameStr);
				element.click();
				if(verifyElementDisplayed(objNameStr, element, testId))
					element.click();
				ExtentReport.reportPass(objNameStr + " is clicked");
			}
			else{				
	            ExtentReport.reportFail(" Could not click on object ' "+element.getText()+" '   Failure ScreenShot ", driver , "Click_Element",testId);			
			}
		} catch (Exception e) {				
			ExtentReport.reportFail(" Could not click on object ' "+objNameStr+" '   Failure ScreenShot ", driver , "Click_Element",testId);	
		}
		
	}

	public static int getTableRowValueByIndex(WebElement selector1,WebElement selector2,String AssetType,int Index) {
		// TODO Auto-generated method stub
		int rowCount = 0;
		//System.out.println("getTableRowValueByIndex : " +Index);
		String CssSelector1 = GetSelectorAsString(selector1);
		String CssSelector2 = GetSelectorAsString(selector2);
		//System.out.println("Table size : " + driver.findElements(By.cssSelector(CssSelector1)).size());
		WebElement baseTable = driver.findElements(By.cssSelector(CssSelector1)).get(Index);	
		//System.out.println("baseTable : " + baseTable);
		List<WebElement> tableRows = baseTable.findElements(By.cssSelector(CssSelector2));
		//System.out.println("tableRows : " + tableRows);
		//System.out.println("tableRows : " + tableRows.size());
		mainloop:
			for (int i = 0; i < tableRows.size(); i++){
				//System.out.println("tableCols.get(i).getText() : " + tableRows.get(i).getText());
            	//System.out.println("AssetType "   + AssetType);
            	//System.out.println(tableRows.get(i).getText().contains(AssetType));
            	if (tableRows.get(i).getText().contains(AssetType)) { 
           		 	rowCount = i;
           		 	System.out.println("rowCount Inside :" + rowCount);
           		 	System.out.println("AssetType "   + AssetType);
           		 	System.out.println("tableCols.get(i).getText() : " + tableRows.get(i).getText());
           		 	
           		 	break mainloop;
                   }            	
			}
		return rowCount;
	}
	
	
	
	public static int getTableRowValueOfGteeByIndex(WebElement selector1,WebElement selector2,String AssetType,int Index) {
		// TODO Auto-generated method stub
		int rowCount = 0;
		//System.out.println("getTableRowValueByIndex : " +Index);
		String CssSelector1 = GetSelectorAsString(selector1);
		String CssSelector2 = GetSelectorAsString(selector2);
		//System.out.println("Table size : " + driver.findElements(By.cssSelector(CssSelector1)).size());
		WebElement baseTable = driver.findElements(By.cssSelector(CssSelector1)).get(Index);	
		//System.out.println("baseTable : " + baseTable);
		List<WebElement> tableRows = baseTable.findElements(By.cssSelector(CssSelector2));
		//System.out.println("tableRows1 : " + tableRows);
		//System.out.println("tableRows2 : " + (tableRows.size()-1));
		rowCount = (tableRows.size());
		System.out.println(rowCount);
		if(tableRows.size()==0)
			return 0;
		else
			return (tableRows.size()-1);
		
	}
	
	public static boolean getObjectExistByIndex(WebElement selector1,WebElement selector2,String AssetType,int Index) {
		// TODO Auto-generated method stub
		//System.out.println("getTableRowValueByIndex : " +Index);
		boolean flag = false;
		String CssSelector1 = GetSelectorAsString(selector1);
		List<WebElement> tableRows = driver.findElements(By.cssSelector(CssSelector1));
		System.out.println("tableRows.get(i) : " + tableRows.get(Index).getText());
        if (tableRows.get(Index).getText().contains("CAUTIOUS") || tableRows.get(Index).getText().contains("GROWTH")) { 
            System.out.println(Index);
            flag = true;
        }
		System.out.println("flag : " + flag);
		return flag;
	
/*		int flag = baseTable.findElements(By.cssSelector(CssSelector2)).indexOf(Index);

		System.out.println(baseTable.findElements(By.cssSelector(CssSelector2)).get(Index).);
		//boolean oExist = baseTable.findElements(By.cssSelector(CssSelector2));
		//boolean flag = tableRows.isDisplayed();
		System.out.println("flag : " + flag);
		//System.out.println("tableRows2 : " + (tableRows.size()-1));
		return flag;*/

		
	}
	
	public static int getTableTotalRowCount(WebElement cssLocatorElement) {
		// TODO Auto-generated method stub
		String CssSelector = GetSelectorAsString(cssLocatorElement);
		int rowCount = driver.findElements(By.cssSelector(CssSelector)).size();		
		return rowCount;
		
	}
	

	public static void EnterValuesInTableByIndex(WebElement selector1,WebElement selector2,
			String InputValue, String FieldName, int index, int rowNumber) throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Inside EnterValuesInTableByIndex :" + FieldName + index + rowNumber + InputValue);		
		
		try{
		String CssSelectorTable = GetSelectorAsString(selector1);
		String CssSelector = GetSelectorAsString(selector2);
		WebElement baseTable = null;
		//System.out.println("EnterValuesInTableByIndex : " +CssSelectorTable);
		//List <WebElement> baseTable = driver.findElements(By.cssSelector(CssSelectorTable));
		
		baseTable = driver.findElements(By.cssSelector(CssSelectorTable)).get(index);		
		
			//List<WebElement> tableRows = baseTable.findElements(By.xpath("tbody/tr"));
			//WebElement tableCols = (WebElement) tableRows.get(rowNumber).findElements(By.cssSelector(CssSelector));
		
		List<WebElement> tableCols = baseTable.findElements(By.cssSelector(CssSelector));
		System.out.println("Tables rows size : " + tableCols.size());
		ExtentReport.reportInfo("Tables size : " + tableCols.size());
			WebElement tableCols1 = baseTable.findElements(By.cssSelector(CssSelector)).get(rowNumber);
			//WebElement tableCols = baseTable.findElements(By.cssSelector(CssSelector)).get(rowNumber);
			System.out.println("tableRows : value" + tableCols1.getAttribute("value"));
			ExtentReport.reportInfo("tableRows : value" + tableCols1.getAttribute("value"));
			
			
			RemoveAttributeByJavaScript(FieldName, tableCols1, InputValue, "");
			
			tableCols1.sendKeys(Keys.CONTROL + "a");
			tableCols1.sendKeys(Keys.DELETE);
			
			enterValueByJavaScript(FieldName, tableCols1, InputValue, "");
			
			//element.clear();
			
			//enterValueByJavaScript(FieldName, tableCols1, InputValue, "");			
			
//			Actions actionList = new Actions(driver);
//			actionList.clickAndHold(tableCols1).sendKeys(InputValue).
//			release().build().perform();
//			System.out.println("----Place value in : " + FieldName);			
			
			//tableCols1.sendKeys(InputValue);
			
			//tableCols1.sendKeys(Keys.chord(Keys.CONTROL, "a"),InputValue);		
		}catch (Exception e){	
				ExtentReport.reportFail("FieldName " + FieldName);
				//ExtentReport.reportFail("Unable to select value : " + InputValue + " from "+ FieldName + ". Method: SelectTextByIndex");	
			}
			
	}
	
	public static void SelectValueInTableByIndex(WebElement selector1,WebElement selector2, 
			String InputValue, String FieldName, int index, int rowNumber,String testId) throws InterruptedException, Exception {
			// TODO Auto-generated method stub
			try{
				if(!InputValue.trim().isEmpty()){
					//System.out.println("Inside SelectValueInTableByIndex");
					String CssSelectorTable = GetSelectorAsString(selector1);
					String CssSelector = GetSelectorAsString(selector2);
					//System.out.println("SelectValueInTableByIndex : " +CssSelectorTable);
					//System.out.println("SelectValueInTableByIndex : " + CssSelector);
					//WebElement element = driver.findElements(By.xpath(XpathSelector)).get(index);
					WebElement baseTable = driver.findElements(By.cssSelector(CssSelectorTable)).get(index);
					//System.out.println("baseTable : " + baseTable);
					WebElement tableCols = baseTable.findElements(By.cssSelector(CssSelector)).get(rowNumber);
					selectValueFormList(FieldName, tableCols, InputValue,testId);	
					ExtentReport.reportInfo("Selected value as "+ InputValue + " on " + FieldName);		
					}	
				} catch (Exception e){	
					ExtentReport.reportFail("Unable to select value : " + InputValue + " from "
							+ FieldName +" '   Failure ScreenShot ", driver , "Method: SelectTextByIndex",testId);
					//ExtentReport.reportFail("Unable to select value : " + InputValue + " from "+ FieldName + ". Method: SelectTextByIndex");	
				}
				
			}
	
	public static void buttonClick(String objNameStr, WebElement objName) throws IOException {	
		try {
			scrollintoview(objName);
			//System.out.println("USE BUTTON");
			objName.click();
			//objName.click();
			//objName.click();
			ExtentReport.reportPass(objNameStr + " is clicked");
		} catch (Exception e) {			
			ExtentReport.reportInfo(objNameStr + " is not clicked " + e);
			//clickJavaScript(objNameStr, objName);
		}
	}
	
	public static void DeletePDFFile(String PDFPath) throws InterruptedException {
		// TODO Auto-generated method stub
		PDFPath = PDFPath + ".pdf";
		//System.out.println("before : " + PDFPath);
        File fileTemp = new File(PDFPath);
        if (fileTemp.exists()){
           fileTemp.delete(); 
           Thread.sleep(10000);
           //System.out.println("deleted");
        }
	}

	public static String GetDateOfBirth(String strSystemDate, int intRetAge, String yearToAdd, String monthToAdd) {
		// TODO Auto-generated method stub
		System.out.println("strSystemDate : " + strSystemDate);
		SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
		@SuppressWarnings("deprecation")
		Date date1=new Date(strSystemDate);				
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date1);
		if(!yearToAdd.isEmpty())
			calendar.add(Calendar.YEAR, Integer.parseInt(yearToAdd));
		else if(!monthToAdd.isEmpty())
			calendar.add(Calendar.MONTH, Integer.parseInt(monthToAdd));
		else
			calendar.add(Calendar.YEAR, 11);		
		String retirementYear = dateformat.format(calendar.getTime());
		ExtentReport.reportInfo("Retirement Year of user: "+ retirementYear );
		//System.out.println("Retirement Year : " + retirementYear );
		calendar.add(Calendar.YEAR, -intRetAge);	
		String dateOfBirth =  dateformat.format(calendar.getTime());
		ExtentReport.reportInfo("Date of Birth : "+ dateOfBirth );
		//System.out.println("Date of Birth : " + dateOfBirth);
		return dateOfBirth;
	}

	public static boolean CheckValueInListByIndex(WebElement selector,	String listValue, 
			String value, int index, String testId) {
		boolean found = false;
		String CssSelector = GetSelectorAsString(selector);
		WebElement element = driver.findElements(By.cssSelector(CssSelector)).get(index);
		System.out.println(element);
		Select select = new Select(element);
		List<WebElement> allOptions = select.getOptions();
		System.out.println("allOptions.size() : " + allOptions.size());
		for(int i=0; i<allOptions.size(); i++) {
			String sValue = select.getOptions().get(i).getText();
			if(sValue.contains(listValue)){
				System.out.println("Inside sValue : " + sValue);
				select.selectByVisibleText(sValue);
				found=true;
				break;
			}
		}
		System.out.println("found :" + found);
		return found;
		// TODO Auto-generated method stub
		
	}

	
}
	

